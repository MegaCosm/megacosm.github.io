(window.webpackJsonpMegacosmDoc=window.webpackJsonpMegacosmDoc||[]).push([[6],{662:function(s,t,e){"use strict";e.r(t);var n=e(0),r=e.n(n),n=e(499),a=e(501),o=e(54),i=e(663),i=e.n(i),u=Object(o.a)(i.a),l=[{name:"1-base",title:Object(o.a)("Base \n Button has several built-in type, default, primary, secondary, success, warning, dange, and link."),component:e(664).default,rawText:e(665)},{name:"1-text",title:Object(o.a)("Text \n set text to use text button"),component:e(666).default,rawText:e(667)},{name:"2-icon",title:Object(o.a)("Icon \n megacosm does not provide built-in icons, you can add it to the content by yourself."),component:e(668).default,rawText:e(669)},{name:"3-size",title:Object(o.a)("Size \n There are three sizes, ['small', 'default', 'large'], default value is 'default'."),component:e(670).default,rawText:e(671)},{name:"4-disabled",title:Object(o.a)("Disabled \n Adding disabled property can disable the button."),component:e(672).default,rawText:e(673)},{name:"5-loading",title:Object(o.a)("Loading \n Set loading property can add a loading indicator to button."),component:e(674).default,rawText:e(675)},{name:"6-href",title:Object(o.a)("Link \n Set the href attribute, the button will be rendered as <a> tag and you can also set the target property."),component:e(676).default,rawText:e(677)},{name:"7-outline",title:Object(o.a)("Outline \n Adding outline property can set background to transparent. Outline type can not be default and link."),component:e(678).default,rawText:e(679)},{name:"8-group",title:Object(o.a)("Group \n A series of buttons can group by Button.Group, set styles by Button.Group's size, type, and outline property."),component:e(680).default,rawText:e(681)},{name:"9-block",title:Object(o.a)("Block \n Set the widht of the button fit to its parent width."),component:e(682).default,rawText:e(683)}];t.default=Object(n.a)(function(t){return r.a.createElement(a.b,Object.assign({},t,{codes:void 0,source:u,examples:l}))})},663:function(t,e){t.exports="# Button\r\n\r\nTo trigger an operation.\r\n\r\n## When To Use\r\nA button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.\r\n\r\nIn Megacosm we provide 9 types of button.\r\n\r\n* Default button: indicate a series of actions without priority.\r\n\r\n* Primary button: indicate the main action, one primary button at most in one section.\r\n\r\n* Secondary button: indicate the secondary action.\r\n\r\n* Success button\r\n  \r\n* Warning button \r\n\r\n* Danger: used for actions of risk, like deletion or authorization.\r\n\r\n* Dashed button: used for adding action commonly.\r\n\r\n* Text button: used for the most secondary action.\r\n\r\n* Link button: used for external links.\r\n\r\nAnd 2 other properties additionally.\r\n\r\n* `disabled`: when actions are not available.\r\n\r\n* `loading` : add loading spinner in button, avoiding multiple submits too.\r\n\r\n<example />\r\n\r\n## API\r\n\r\nDifferent button styles can be generated by setting Button properties. The recommended order is: `type` -> `shape` -> `size` -> `loading` -> `disabled`.\r\n\r\n### Button\r\n\r\n| Property  | Type                                                                                  | Default   | Description                                                                                              |\r\n| --------- | ------------------------------------------------------------------------------------- | --------- | -------------------------------------------------------------------------------------------------------- |\r\n| children  | ReactNode                                                                             | required  | The content inside the button, can be a text icon, etc.                                                  |\r\n| className | string                                                                                | -         | extend className                                                                                         |\r\n| disabled  | boolean                                                                               | false     | Specifies the button should be disabled                                                                  |\r\n| href      | string                                                                                | -         | If the href attribute is set, &lt;a> will be used instead of &lt;button>.                                |\r\n| outline   | boolean                                                                               | false     | When outline is true, the background is transparent.                                                     |\r\n| size      | 'large' \\| 'default' \\| 'small'                                                       | 'default' | size of button                                                                                           |\r\n| style     | object                                                                                | -         | Container element style                                                                                  |\r\n| type      | 'default' \\| 'primary' \\| 'secondary' \\| 'success' \\| 'warning' \\| 'danger' \\| 'link' \\| 'dashed' | 'default' | type of button                                                                                           |\r\n| text      | boolean                                                                               | false     | text button                                                                                              |\r\n| onClick   | () => void                                                                            | none      | button click callback                                                                                    |\r\n| space     | boolean                                                                               | false     | For Button with only 2 Chinese characters, whether to insert a space between the two Chinese characters. \r\n| block     | boolean                                                                               | false     | Option to fit button width to its parent width. |\r\n\r\n### Button.Group\r\n\r\n| Property | Type      | Default  | Description     |\r\n| -------- | --------- | -------- | --------------- |\r\n| children | ReactNode | required | array of Button |\r\n| size     | string    | -        | same as Button  |\r\n| outline  | boolean   | -        | same as Button  |\r\n| type     | string    | -        | same as Button  |\r\n"},664:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65),i=n(178);e.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a,null,"Default"),a.a.createElement(o.a,{type:"primary"},"Primary"),a.a.createElement(o.a,{type:"secondary"},"Secondary"),a.a.createElement(o.a,{type:"success"},"Success"),a.a.createElement(o.a,{type:"warning"},"Warning"),a.a.createElement(o.a,{type:"danger"},"Danger"),a.a.createElement(o.a,{type:"link"},"Link"),a.a.createElement(o.a,{shape:"round"},"Rounded"),a.a.createElement(o.a,{type:"dashed",size:"large"},a.a.createElement(i.a,{name:"home",style:{marginRight:4}})))}},665:function(t,e){t.exports='/**\r\n * - Base\r\n *    -- Button has several built-in type, default, primary, secondary, success, warning, dange, and link.\r\n */\r\nimport React from "react";\r\nimport { Button } from "megacosm";\r\nimport FontAwesome from "../Icon/FontAwesome";\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Button>Default</Button>\r\n      <Button type="primary">Primary</Button>\r\n      <Button type="secondary">Secondary</Button>\r\n      <Button type="success">Success</Button>\r\n      <Button type="warning">Warning</Button>\r\n      <Button type="danger">Danger</Button>\r\n      <Button type="link">Link</Button>\r\n      <Button shape="round">Rounded</Button>\r\n      <Button type="dashed" size="large">\r\n        <FontAwesome name="home" style={{ marginRight: 4 }} />\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n'},666:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65);e.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a,{text:!0},"Default"),a.a.createElement(o.a,{text:!0,type:"primary"},"Primary"),a.a.createElement(o.a,{text:!0,type:"secondary"},"Secondary"),a.a.createElement(o.a,{text:!0,type:"success"},"Success"),a.a.createElement(o.a,{text:!0,type:"warning"},"Warning"),a.a.createElement(o.a,{text:!0,type:"danger"},"Danger"),a.a.createElement(o.a,{text:!0,type:"link"},"Link"))}},667:function(t,e){t.exports='/**\r\n * - Text\r\n *    -- set text to use text button\r\n */\r\nimport React from \'react\'\r\nimport { Button } from \'megacosm\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Button text>Default</Button>\r\n      <Button text type="primary">\r\n        Primary\r\n      </Button>\r\n      <Button text type="secondary">\r\n        Secondary\r\n      </Button>\r\n      <Button text type="success">\r\n        Success\r\n      </Button>\r\n      <Button text type="warning">\r\n        Warning\r\n      </Button>\r\n      <Button text type="danger">\r\n        Danger\r\n      </Button>\r\n      <Button text type="link">\r\n        Link\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n'},668:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65),i=n(178);e.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a,{type:"primary"},a.a.createElement(i.a,{name:"home",style:{marginRight:4}}),"left"),a.a.createElement(o.a,{type:"primary"},"right",a.a.createElement(i.a,{name:"home",style:{marginLeft:4}})),a.a.createElement(o.a,{type:"primary"},"ce",a.a.createElement(i.a,{name:"home",style:{margin:"0 4px"}}),"ter"))}},669:function(t,e){t.exports='/**\r\n * - Icon\r\n *    -- megacosm does not provide built-in icons, you can add it to the content by yourself.\r\n */\r\nimport React from \'react\'\r\nimport { Button } from \'megacosm\'\r\nimport FontAwesome from \'../Icon/FontAwesome\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Button type="primary">\r\n        <FontAwesome name="home" style={{ marginRight: 4 }} />\r\n        left\r\n      </Button>\r\n      <Button type="primary">\r\n        right\r\n        <FontAwesome name="home" style={{ marginLeft: 4 }} />\r\n      </Button>\r\n      <Button type="primary">\r\n        ce\r\n        <FontAwesome name="home" style={{ margin: \'0 4px\' }} />\r\n        ter\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n'},670:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65);e.default=function(){return a.a.createElement("div",null,a.a.createElement("div",null,a.a.createElement(o.a,{size:"small"},"Default"),a.a.createElement(o.a,{size:"small",type:"primary"},"Primary"),a.a.createElement(o.a,{size:"small",type:"secondary"},"Secondary"),a.a.createElement(o.a,{size:"small",type:"success"},"Success"),a.a.createElement(o.a,{size:"small",type:"warning"},"Warning"),a.a.createElement(o.a,{size:"small",type:"danger"},"Danger"),a.a.createElement(o.a,{size:"small",type:"link"},"Link")),a.a.createElement("br",null),a.a.createElement("div",null,a.a.createElement(o.a,null,"Default"),a.a.createElement(o.a,{type:"primary"},"Primary"),a.a.createElement(o.a,{type:"secondary"},"Secondary"),a.a.createElement(o.a,{type:"success"},"Success"),a.a.createElement(o.a,{type:"warning"},"Warning"),a.a.createElement(o.a,{type:"danger"},"Danger"),a.a.createElement(o.a,{type:"link"},"Link")),a.a.createElement("br",null),a.a.createElement("div",null,a.a.createElement(o.a,{size:"large"},"Default"),a.a.createElement(o.a,{size:"large",type:"primary"},"Primary"),a.a.createElement(o.a,{size:"large",type:"secondary"},"Secondary"),a.a.createElement(o.a,{size:"large",type:"success"},"Success"),a.a.createElement(o.a,{size:"large",type:"warning"},"Warning"),a.a.createElement(o.a,{size:"large",type:"danger"},"Danger"),a.a.createElement(o.a,{size:"large",type:"link"},"Link")))}},671:function(t,e){t.exports='/**\r\n * - Size\r\n *    -- There are three sizes, [\'small\', \'default\', \'large\'], default value is \'default\'.\r\n */\r\nimport React from \'react\'\r\nimport { Button } from \'megacosm\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Button size="small">Default</Button>\r\n        <Button size="small" type="primary">\r\n          Primary\r\n        </Button>\r\n        <Button size="small" type="secondary">\r\n          Secondary\r\n        </Button>\r\n        <Button size="small" type="success">\r\n          Success\r\n        </Button>\r\n        <Button size="small" type="warning">\r\n          Warning\r\n        </Button>\r\n        <Button size="small" type="danger">\r\n          Danger\r\n        </Button>\r\n        <Button size="small" type="link">\r\n          Link\r\n        </Button>\r\n      </div>\r\n      <br />\r\n      <div>\r\n        <Button>Default</Button>\r\n        <Button type="primary">Primary</Button>\r\n        <Button type="secondary">Secondary</Button>\r\n        <Button type="success">Success</Button>\r\n        <Button type="warning">Warning</Button>\r\n        <Button type="danger">Danger</Button>\r\n        <Button type="link">Link</Button>\r\n      </div>\r\n      <br />\r\n      <div>\r\n        <Button size="large">Default</Button>\r\n        <Button size="large" type="primary">\r\n          Primary\r\n        </Button>\r\n        <Button size="large" type="secondary">\r\n          Secondary\r\n        </Button>\r\n        <Button size="large" type="success">\r\n          Success\r\n        </Button>\r\n        <Button size="large" type="warning">\r\n          Warning\r\n        </Button>\r\n        <Button size="large" type="danger">\r\n          Danger\r\n        </Button>\r\n        <Button size="large" type="link">\r\n          Link\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n'},672:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65);e.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a,{disabled:!0},"Default"),a.a.createElement(o.a,{disabled:!0,type:"primary"},"Primary"),a.a.createElement(o.a,{disabled:!0,type:"secondary"},"Secondary"),a.a.createElement(o.a,{disabled:!0,type:"success"},"Success"),a.a.createElement(o.a,{disabled:!0,type:"warning"},"Warning"),a.a.createElement(o.a,{disabled:!0,type:"danger"},"Danger"),a.a.createElement(o.a,{disabled:!0,type:"link"},"Link"))}},673:function(t,e){t.exports='/**\r\n * - Disabled\r\n *    -- Adding disabled property can disable the button.\r\n */\r\nimport React from \'react\'\r\nimport { Button } from \'megacosm\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Button disabled>Default</Button>\r\n      <Button disabled type="primary">\r\n        Primary\r\n      </Button>\r\n      <Button disabled type="secondary">\r\n        Secondary\r\n      </Button>\r\n      <Button disabled type="success">\r\n        Success\r\n      </Button>\r\n      <Button disabled type="warning">\r\n        Warning\r\n      </Button>\r\n      <Button disabled type="danger">\r\n        Danger\r\n      </Button>\r\n      <Button disabled type="link">\r\n        Link\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n'},674:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65);e.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a,{loading:!0,size:"small",type:"primary"},"Small"),a.a.createElement(o.a,{loading:!0,type:"primary"},"Default"),a.a.createElement(o.a,{loading:!0,size:"large",type:"primary"},"Large"))}},675:function(t,e){t.exports='/**\r\n * - Loading\r\n *    -- Set loading property can add a loading indicator to button.\r\n */\r\nimport React from \'react\'\r\nimport { Button } from \'megacosm\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Button loading size="small" type="primary">\r\n        Small\r\n      </Button>\r\n      <Button loading type="primary">\r\n        Default\r\n      </Button>\r\n      <Button loading size="large" type="primary">\r\n        Large\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n'},676:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65);e.default=function(){return a.a.createElement(o.a,{href:"#home",target:"_blank",type:"primary"},"Home")}},677:function(t,e){t.exports='/**\r\n * - Link\r\n *    -- Set the href attribute, the button will be rendered as <a> tag and you can also set the target property.\r\n */\r\nimport React from "react";\r\nimport { Button } from "megacosm";\r\n\r\nexport default function() {\r\n  return (\r\n    <Button href="#home" target="_blank" type="primary">\r\n      Home\r\n    </Button>\r\n  );\r\n}\r\n'},678:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65);e.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a,{outline:!0,type:"primary"},"Primary"),a.a.createElement(o.a,{outline:!0,type:"secondary"},"Secondary"),a.a.createElement(o.a,{outline:!0,type:"success"},"Success"),a.a.createElement(o.a,{outline:!0,type:"warning"},"Warning"),a.a.createElement(o.a,{outline:!0,type:"danger"},"Danger"))}},679:function(t,e){t.exports='/**\r\n * - Outline\r\n *    -- Adding outline property can set background to transparent. Outline type can not be default and link.\r\n */\r\nimport React from \'react\'\r\nimport { Button } from \'megacosm\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Button outline type="primary">\r\n        Primary\r\n      </Button>\r\n      <Button outline type="secondary">\r\n        Secondary\r\n      </Button>\r\n      <Button outline type="success">\r\n        Success\r\n      </Button>\r\n      <Button outline type="warning">\r\n        Warning\r\n      </Button>\r\n      <Button outline type="danger">\r\n        Danger\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n'},680:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65),i=n(178);e.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a.Group,null,a.a.createElement(o.a,null,"Left"),a.a.createElement(o.a,null,"Center"),a.a.createElement(o.a,null,"Right")),a.a.createElement("br",null),a.a.createElement(o.a.Group,{outline:!0,type:"primary"},a.a.createElement(o.a,null,"Left"),a.a.createElement(o.a,null,"Center"),a.a.createElement(o.a,null,"Right")),a.a.createElement("br",null),a.a.createElement(o.a.Group,{outline:!0,type:"primary"},a.a.createElement(o.a,{disabled:!0},"disabled"),a.a.createElement(o.a,{disabled:!0},"Center"),a.a.createElement(o.a,null,"Right")),a.a.createElement("br",null),a.a.createElement(o.a.Group,{type:"primary"},a.a.createElement(o.a,null,a.a.createElement(i.a,{name:"angle-left",style:{marginRight:4}}),"Left"),a.a.createElement(o.a,null,"Center"),a.a.createElement(o.a,null,"Right",a.a.createElement(i.a,{name:"angle-right",style:{marginLeft:4}}))),a.a.createElement("br",null),a.a.createElement(o.a.Group,{size:"large"},a.a.createElement(o.a,null,"Left"),a.a.createElement(o.a,null,"Center"),a.a.createElement(o.a,null,"Right")))}},681:function(t,e){t.exports='/**\r\n * - Group\r\n *    -- A series of buttons can group by Button.Group, set styles by Button.Group\'s size, type, and outline property.\r\n */\r\nimport React from \'react\'\r\nimport { Button } from \'megacosm\'\r\nimport FontAwesome from \'../Icon/FontAwesome\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Button.Group>\r\n        <Button>Left</Button>\r\n        <Button>Center</Button>\r\n        <Button>Right</Button>\r\n      </Button.Group>\r\n\r\n      <br />\r\n\r\n      <Button.Group outline type="primary">\r\n        <Button>Left</Button>\r\n        <Button>Center</Button>\r\n        <Button>Right</Button>\r\n      </Button.Group>\r\n\r\n      <br />\r\n      <Button.Group outline type="primary">\r\n        <Button disabled>disabled</Button>\r\n        <Button disabled>Center</Button>\r\n        <Button>Right</Button>\r\n      </Button.Group>\r\n\r\n      <br />\r\n\r\n      <Button.Group type="primary">\r\n        <Button>\r\n          <FontAwesome name="angle-left" style={{ marginRight: 4 }} />\r\n          Left\r\n        </Button>\r\n        <Button>Center</Button>\r\n        <Button>\r\n          Right\r\n          <FontAwesome name="angle-right" style={{ marginLeft: 4 }} />\r\n        </Button>\r\n      </Button.Group>\r\n\r\n      <br />\r\n\r\n      <Button.Group size="large">\r\n        <Button>Left</Button>\r\n        <Button>Center</Button>\r\n        <Button>Right</Button>\r\n      </Button.Group>\r\n    </div>\r\n  )\r\n}\r\n'},682:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(65);e.default=function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(o.a,{type:"primary",block:!0},"Primary"),a.a.createElement(o.a,{block:!0},"Default"),a.a.createElement(o.a,{type:"dashed",block:!0},"Dashed"),a.a.createElement(o.a,{type:"link",block:!0},"Link"))}},683:function(t,e){t.exports='/**\r\n * - Block\r\n *    -- Set the widht of the button fit to its parent width.\r\n */\r\nimport React from "react";\r\nimport { Button } from "megacosm";\r\n\r\nexport default function() {\r\n  return (\r\n    <>\r\n      <Button type="primary" block>\r\n        Primary\r\n      </Button>\r\n      <Button block>Default</Button>\r\n      <Button type="dashed" block>\r\n        Dashed\r\n      </Button>\r\n      <Button type="link" block>\r\n        Link\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n'}}]);