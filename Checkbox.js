(window.webpackJsonpMegacosmDoc=window.webpackJsonpMegacosmDoc||[]).push([[11],{294:function(u,s,e){"use strict";var n=e(55),t=e(20),c=e(91),h=e(70),m=e(3),b=e(4),r=e(1),a=e(27),o=e(22),f=e(5),p=e(6),l=e(0),d=e.n(l),l=e(16),k=e.n(l),l=e(19),x=e(21),i=e(9),y=e(500),v=e(56),e=function(e){Object(f.a)(t,e);var n=Object(p.a)(t);function t(e){return Object(m.a)(this,t),(e=n.call(this,e)).handleClick=e.handleClick.bind(Object(r.a)(e)),e.handleUpdate=e.handleUpdate.bind(Object(r.a)(e)),e.handleRawChange=e.handleRawChange.bind(Object(r.a)(e)),e}return Object(b.a)(t,[{key:"componentDidMount",value:function(){Object(a.a)(Object(o.a)(t.prototype),"componentDidMount",this).call(this),this.props.datum.subscribe(i.a,this.handleUpdate)}},{key:"componentWillUnmount",value:function(){Object(a.a)(Object(o.a)(t.prototype),"componentWillUnmount",this).call(this),this.props.datum.unsubscribe(i.a,this.handleUpdate)}},{key:"getContent",value:function(e){var n=this.props.renderItem;return"string"==typeof n?e[n]:"function"==typeof n?n(e):""}},{key:"handleUpdate",value:function(){this.forceUpdate()}},{key:"handleClick",value:function(e,n,t){var r=this.props,a=r.data,r=r.datum;n?r.add(a[t]):r.remove(a[t])}},{key:"handleRawChange",value:function(e,n){var t=this.props.datum;n?t.add(e):t.remove(e)}},{key:"render",value:function(){var t=this,e=this.props,n=e.block,r=e.data,a=e.datum,o=e.keygen,e=e.children,n=k()(Object(v.a)("group",["no-block","block"][Number(n)]),this.props.className);return void 0===r?d.a.createElement("div",{className:n},d.a.createElement(y.a,{value:{onRawChange:this.handleRawChange,checked:a.check.bind(a)}},e)):d.a.createElement("div",{className:n},r.map(function(e,n){return d.a.createElement(c.a,{checked:a.check(e),disabled:a.disabled(e),key:Object(x.b)(e,o,n),htmlValue:n,index:n,onChange:t.handleClick},t.getContent(e))}),e)}}]),t}(l.b),l=(e.defaultProps={renderItem:function(e){return e}},e),e=Object(t.compose)(n.a,y.b)(c.a);e.Group=Object(t.compose)(n.a,h.a.hoc({bindProps:["disabled","format","prediction","separator"]}))(l),e.Checkbox=c.a,e.displayName="MegacosmCheckbox",e.Group.displayName="MegacosmCheckboxGroup",s.a=e},500:function(e,n,t){"use strict";t.d(n,"a",function(){return o}),t.d(n,"b",function(){return c});var n=t(0),r=t.n(n),n=t(40),a=Object(n.a)(),o=a.Provider,c=function(t){return function(n){return r.a.createElement(a.Consumer,null,function(e){return r.a.createElement(t,Object.assign({},n,e))})}}},745:function(i,e,n){"use strict";n.r(e);var t=n(0),r=n.n(t),t=n(499),a=n(501),o=n(54),c=n(746),c=n.n(c),l=Object(o.a)(c.a),d=[{name:"01-base",title:Object(o.a)("Base \n Basic Checkbox"),component:n(747).default,rawText:n(748)},{name:"02-checked",title:Object(o.a)("Checked \n The checked has three values: true(checked), false(not checked), 'indeterminate'(half-checked)."),component:n(749).default,rawText:n(750)},{name:"03-value",title:Object(o.a)("Value \n When the htmlValue is set, the checkbox return the htmlValue (checked) and undefined (not checked); \n When the htmlValue is not set, the checkbox selected return true (checked) and undefined (not checked);"),component:n(751).default,rawText:n(752)},{name:"04-rawgroup",title:Object(o.a)("Group \n A series of checkboxes group by Checkbox.Group."),component:n(753).default,rawText:n(754)},{name:"05-group",title:Object(o.a)(" \n Render a group of checkboxes from data."),component:n(755).default,rawText:n(756)},{name:"06-format",title:Object(o.a)("Complex data \n Complex data can use format to process value."),component:n(757).default,rawText:n(758)},{name:"08-block",title:Object(o.a)("Block \n The default is horizontal layout, and setting the block property can change it to be vertical layout."),component:n(759).default,rawText:n(760)},{name:"09-disabled",title:Object(o.a)("Disabled \n Set the disabled property of Checkbox.Group to true, disable all the checkboxes."),component:n(761).default,rawText:n(762)},{name:"10-disabled",title:Object(o.a)(" \n When the disabled is a function, disbale the option that the function to return true."),component:n(763).default,rawText:n(764)},{name:"11-input",title:Object(o.a)("Inputable \n Set the inputable property to true can show the input box and the return value is the value of the input box."),component:n(765).default,rawText:n(766)}];e.default=Object(t.a)(function(e){return r.a.createElement(a.b,Object.assign({},e,{codes:void 0,source:l,examples:d}))})},746:function(e,n){e.exports="# Checkbox\r\n\r\n<example />\r\n\r\n## API\r\n\r\n### Checkbox\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| checked | boolean \\| 'indeterminate' | - | if not set, use (value === htmlValue). |\r\n| disabled | boolean | false | disable checkbox |\r\n| htmlValue | any | true | Specifies the result |\r\n| name | string | - | The name of the Form which access data |\r\n| onChange | (value: any, checked: boolean) => void | - | When selected, value is htmlValue and checked is true.<br />When not selected, value is undefined and checked is false. |\r\n| value | any | - |  |\r\n\r\n### Checkbox.Group\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| data | any[] | required | The data item |\r\n| datum | object | - | If the format and prediction does not satisfied your requirements, you can pass in a [Datum.List](/components/Datum.List) object or the Datum.List configuration to process data. |\r\n| defaultValue | any[] | [] | Initial value |\r\n| disabled | (data: any) => boolean \\| boolean | false | When the value is true, disabled all checkboxes; When the value is function, disable the checkbox that this function returns true. |\r\n| format | ((data: any) => any) | string | d => d | format value |\r\n| name | string | - | The name of the Form which access data |\r\n| keygen | ((data: any) => string) \\| string \\| true | required | Key generator<br />When it is true, the data itself is used as the key equivalent to (d => d)<br />When it is a function, use its return value.<br />When it is a stringï¼Œues the value of the string.For example, 'id' is the same thing as (d) => d.id. |\r\n| onChange | (value: any[]) => void  | - | value is datum.getValue() |\r\n| prediction | (value: any, data: any) => boolean |  (val, d) => val===format(d) | By default, the result of the format function is used to compare whether it matches. In some cases (for example, whe an object that returns the original data is updated, an different option with the same value  is generated), the prediction function needs to be used to determine whether match |\r\n| renderItem | (data: any) => ReactNode \\| string | required | When it is a string, return d\\[string]<br />When it is a function, return the result of the function. |\r\n| value | any[] | - | In the Form, the value will be taken over by the form and the value will lose efficacy. |\r\n"},747:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(294);n.default=function(){return a.a.createElement(o.a,null,"Checkbox")}},748:function(e,n){e.exports="/**\r\n * - Base\r\n *    -- Basic Checkbox\r\n */\r\nimport React from 'react'\r\nimport { Checkbox } from 'megacosm'\r\n\r\nexport default function() {\r\n  return <Checkbox>Checkbox</Checkbox>\r\n}\r\n"},749:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(294);n.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a,{checked:!1},"not checked"),a.a.createElement(o.a,{checked:!0},"checked"),a.a.createElement(o.a,{checked:"indeterminate"},"indeterminate"))}},750:function(e,n){e.exports="/**\r\n * - Checked\r\n *    -- The checked has three values: true(checked), false(not checked), 'indeterminate'(half-checked).\r\n */\r\nimport React from 'react'\r\nimport { Checkbox } from 'megacosm'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Checkbox checked={false}>not checked</Checkbox>\r\n      <Checkbox checked>checked</Checkbox>\r\n      <Checkbox checked=\"indeterminate\">indeterminate</Checkbox>\r\n    </div>\r\n  )\r\n}\r\n"},751:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(294);n.default=function(){return a.a.createElement(o.a,{htmlValue:"ok",value:"ok"},'value is "ok"')}},752:function(e,n){e.exports="/**\r\n * - Value\r\n *    -- When the htmlValue is set, the checkbox return the htmlValue (checked) and undefined (not checked);\r\n *    -- When the htmlValue is not set, the checkbox selected return true (checked) and undefined (not checked);\r\n */\r\nimport React from 'react'\r\nimport { Checkbox } from 'megacosm'\r\n\r\nexport default function() {\r\n  return (\r\n    <Checkbox htmlValue=\"ok\" value=\"ok\">\r\n      {'value is \"ok\"'}\r\n    </Checkbox>\r\n  )\r\n}\r\n"},753:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(294),c=[{id:1,color:"red"},{id:2,color:"orange"},{id:3,color:"yellow"},{id:4,color:"green"},{id:5,color:"cyan"},{id:6,color:"blue"},{id:7,color:"violet"}];n.default=function(){return a.a.createElement(o.a.Group,{keygen:"id",defaultValue:[3,5]},c.map(function(e){return a.a.createElement(o.a,{key:e.id,htmlValue:e.id},e.color)}))}},754:function(e,n){e.exports="/**\r\n * - Group\r\n *    -- A series of checkboxes group by Checkbox.Group.\r\n */\r\nimport React from 'react'\r\nimport { Checkbox } from 'megacosm'\r\n\r\nconst data = [\r\n  { id: 1, color: 'red' },\r\n  { id: 2, color: 'orange' },\r\n  { id: 3, color: 'yellow' },\r\n  { id: 4, color: 'green' },\r\n  { id: 5, color: 'cyan' },\r\n  { id: 6, color: 'blue' },\r\n  { id: 7, color: 'violet' },\r\n]\r\n\r\nexport default function() {\r\n  return (\r\n    <Checkbox.Group keygen=\"id\" defaultValue={[3, 5]}>\r\n      {data.map(d => (\r\n        <Checkbox key={d.id} htmlValue={d.id}>\r\n          {d.color}\r\n        </Checkbox>\r\n      ))}\r\n    </Checkbox.Group>\r\n  )\r\n}\r\n"},755:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(294),c=["red","orange","yellow","green","cyan","blue","violet"];function l(e){var n={borderBottom:"solid 1px ".concat(e),paddingBottom:2};return a.a.createElement("span",{style:n},e)}n.default=function(){return a.a.createElement(o.a.Group,{keygen:function(e){return e},data:c,defaultValue:["blue","cyan"],renderItem:l})}},756:function(e,n){e.exports="/**\r\n * - \r\n *    --Render a group of checkboxes from data.\r\n */\r\nimport React from 'react'\r\nimport { Checkbox } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nfunction renderItem(color) {\r\n  const style = { borderBottom: `solid 1px ${color}`, paddingBottom: 2 }\r\n  return <span style={style}>{color}</span>\r\n}\r\n\r\nexport default function() {\r\n  return <Checkbox.Group keygen={c => c} data={data} defaultValue={['blue', 'cyan']} renderItem={renderItem} />\r\n}\r\n"},757:function(o,e,n){"use strict";n.r(e),n.d(e,"default",function(){return a});var c=n(3),t=n(4),r=n(5),l=n(6),e=n(0),d=n.n(e),i=n(294),u=[{id:1,color:"red"},{id:2,color:"orange"},{id:3,color:"yellow"},{id:4,color:"green"},{id:5,color:"cyan"},{id:6,color:"blue"},{id:7,color:"violet"}],a=function(e){Object(r.a)(o,e);var a=Object(l.a)(o);function o(){var e;Object(c.a)(this,o);for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return(e=a.call.apply(a,[this].concat(t))).renderItem=function(e){var n={borderBottom:"solid 1px ".concat(e.color),paddingBottom:2};return d.a.createElement("span",{style:n},e.color)},e}return Object(t.a)(o,[{key:"render",value:function(){return d.a.createElement(i.a.Group,{keygen:"id",data:u,format:"color",defaultValue:["blue","cyan"],renderItem:this.renderItem})}}]),o}(e.Component)},758:function(e,n){e.exports="/**\r\n * - Complex data\r\n *    -- Complex data can use format to process value.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Checkbox } from 'megacosm'\r\n\r\nconst data = [\r\n  { id: 1, color: 'red' },\r\n  { id: 2, color: 'orange' },\r\n  { id: 3, color: 'yellow' },\r\n  { id: 4, color: 'green' },\r\n  { id: 5, color: 'cyan' },\r\n  { id: 6, color: 'blue' },\r\n  { id: 7, color: 'violet' },\r\n]\r\n\r\nexport default class extends Component {\r\n  renderItem = d => {\r\n    const style = { borderBottom: `solid 1px ${d.color}`, paddingBottom: 2 }\r\n    return <span style={style}>{d.color}</span>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Checkbox.Group\r\n        keygen=\"id\"\r\n        data={data}\r\n        format=\"color\"\r\n        defaultValue={['blue', 'cyan']}\r\n        renderItem={this.renderItem}\r\n      />\r\n    )\r\n  }\r\n}\r\n"},759:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(294),c=[{id:1,color:"red"},{id:2,color:"orange"},{id:3,color:"yellow"},{id:4,color:"green"},{id:5,color:"cyan"},{id:6,color:"blue"},{id:7,color:"violet"}];n.default=function(){return a.a.createElement(o.a.Group,{keygen:"id",block:!0,data:c,datum:{format:"color"},defaultValue:["blue","cyan"],renderItem:"color"})}},760:function(e,n){e.exports="/**\r\n * - Block\r\n *    -- The default is horizontal layout, and setting the block property can change it to be vertical layout.\r\n */\r\nimport React from 'react'\r\nimport { Checkbox } from 'megacosm'\r\n\r\nconst data = [\r\n  { id: 1, color: 'red' },\r\n  { id: 2, color: 'orange' },\r\n  { id: 3, color: 'yellow' },\r\n  { id: 4, color: 'green' },\r\n  { id: 5, color: 'cyan' },\r\n  { id: 6, color: 'blue' },\r\n  { id: 7, color: 'violet' },\r\n]\r\n\r\nexport default function() {\r\n  return (\r\n    <Checkbox.Group\r\n      keygen=\"id\"\r\n      block\r\n      data={data}\r\n      datum={{ format: 'color' }}\r\n      defaultValue={['blue', 'cyan']}\r\n      renderItem=\"color\"\r\n    />\r\n  )\r\n}\r\n"},761:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(294),c=["red","orange","yellow","green","cyan","blue","violet"];n.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a.Group,{disabled:!0,keygen:!0,data:c,defaultValue:["blue","cyan"],renderItem:function(e){return e}}),a.a.createElement("br",null),a.a.createElement(o.a,{disabled:!0,checked:!1},"not checked"),a.a.createElement(o.a,{disabled:!0,checked:!0},"checked"),a.a.createElement(o.a,{disabled:!0,checked:"indeterminate"},"indeterminate"))}},762:function(e,n){e.exports="/**\r\n * - Disabled\r\n *    -- Set the disabled property of Checkbox.Group to true, disable all the checkboxes.\r\n */\r\nimport React from 'react'\r\nimport { Checkbox } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Checkbox.Group disabled keygen data={data} defaultValue={['blue', 'cyan']} renderItem={d => d} />\r\n      <br />\r\n      <Checkbox disabled checked={false}>\r\n        not checked\r\n      </Checkbox>\r\n      <Checkbox disabled checked>\r\n        checked\r\n      </Checkbox>\r\n      <Checkbox disabled checked=\"indeterminate\">\r\n        indeterminate\r\n      </Checkbox>\r\n    </div>\r\n  )\r\n}\r\n"},763:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(294),c=["red","orange","yellow","green","cyan","blue","violet"];n.default=function(){return a.a.createElement("div",null,a.a.createElement(o.a.Group,{data:c,disabled:function(e){return"yellow"===e},keygen:!0,value:["blue"],renderItem:function(e){return e}}))}},764:function(e,n){e.exports="/**\r\n * -\r\n *    -- When the disabled is a function, disbale the option that the function to return true.\r\n */\r\nimport React from 'react'\r\nimport { Checkbox } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Checkbox.Group data={data} disabled={d => d === 'yellow'} keygen value={['blue']} renderItem={d => d} />\r\n    </div>\r\n  )\r\n}\r\n"},765:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(294);n.default=function(){return a.a.createElement(o.a,{inputable:!0},"more...")}},766:function(e,n){e.exports='/**\r\n * - Inputable\r\n *    -- Set the inputable property to true can show the input box and the return value is the value of the input box.\r\n */\r\nimport React from "react";\r\nimport { Checkbox } from "megacosm";\r\n\r\nexport default function() {\r\n  return <Checkbox inputable>more...</Checkbox>;\r\n}\r\n'}}]);