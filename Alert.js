(window.webpackJsonpMegacosmDoc=window.webpackJsonpMegacosmDoc||[]).push([[4],{1240:function(e,n,t){"use strict";t.r(n);var r=t(0),o=t.n(r),a=t(486),l=t(487),i=t(45),r=t(1241),r=t.n(r),s=Object(i.a)(r.a),c=[{name:"1-base",title:Object(i.a)("Base \n Basic usage"),component:t(1242).default,rawText:t(1243)},{name:"2-type",title:Object(i.a)("type \n There are four built-in types (styles), [success, info, warning, danger], the default value is warning."),component:t(1244).default,rawText:t(1245)},{name:"3-close",title:Object(i.a)("onClose \n When the onClose property is set, the close button is displayed. \n When the onClose property is true, only hide the component. \n When the onClose is a function, call this function after hiding it."),component:t(1246).default,rawText:t(1247)},{name:"4-icon",title:Object(i.a)("Icon \n Set the icon property to display the built-in icon."),component:t(1248).default,rawText:t(1249)}];n.default=Object(a.a)(function(e){return o.a.createElement(l.b,Object.assign({},e,{codes:void 0,source:s,examples:c}))})},1241:function(e,n){e.exports="# Alert\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| Property | Type | Default | Description |\r\n| -------- | ---- | ------- | ----------- |\r\n| children | ReactNode  | - | Content, text or react component |\r\n| className | string | - | Extend className |\r\n| icon | ReactNode \\| boolean | - | When the type is true, the status icon is displayed according to the type property. If you need to display a custom icon, pass in ReactElement. |\r\n| iconSize | number | 14 | The size for icon |\r\n| onClose | () => void \\| boolean | - | When onClose is empty, no close is displayed. If you need to close and do not need to handle callbacks, set it true. |\r\n| style | object | - | Container element style |\r\n| type | 'success' \\| 'info' \\| 'warning' \\| 'danger' \\| 'error' | *warning* | type of alert |\r\n| hideClose | boolean | false | hide close button |\r\n"},1242:function(e,n,t){"use strict";t.r(n);var r=t(0),o=t.n(r),a=t(98);n.default=function(){return o.a.createElement(a.a,null,o.a.createElement("h3",null,"Title"),"Some content.")}},1243:function(e,n){e.exports="/**\r\n * - Base\r\n *    -- Basic usage\r\n */\r\nimport React from 'react'\r\nimport { Alert } from 'megacosm'\r\n\r\nexport default function() {\r\n  return (\r\n    <Alert>\r\n      <h3>Title</h3>\r\n      Some content.\r\n    </Alert>\r\n  )\r\n}\r\n"},1244:function(e,n,t){"use strict";t.r(n);var r=t(0),o=t.n(r),a=t(98);n.default=function(){return o.a.createElement("div",null,o.a.createElement(a.a,{type:"success"},"Success Type."),o.a.createElement(a.a,{type:"info"},"Info Type."),o.a.createElement(a.a,{type:"warning"},"Warning Type."),o.a.createElement(a.a,{type:"danger"},"Danger Type."))}},1245:function(e,n){e.exports='/**\r\n * - type\r\n *    -- There are four built-in types (styles), [success, info, warning, danger], the default value is warning.\r\n */\r\nimport React from \'react\'\r\nimport { Alert } from \'megacosm\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Alert type="success">Success Type.</Alert>\r\n      <Alert type="info">Info Type.</Alert>\r\n      <Alert type="warning">Warning Type.</Alert>\r\n      <Alert type="danger">Danger Type.</Alert>\r\n    </div>\r\n  )\r\n}\r\n'},1246:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var r=t(4),o=t(5),a=t(2),l=t(6),i=t(7),n=t(0),s=t.n(n),c=t(98),p=function(e){Object(l.a)(t,e);var n=Object(i.a)(t);function t(e){return Object(r.a)(this,t),(e=n.call(this,e)).state={placeholder:""},e.handleClose=e.handleClose.bind(Object(a.a)(e)),e}return Object(o.a)(t,[{key:"handleClose",value:function(){this.setState({placeholder:"Alert was dismissed."})}},{key:"render",value:function(){var e=this.state.placeholder;return s.a.createElement("div",null,s.a.createElement(c.a,{onClose:!0},"Alert onClose=true"),s.a.createElement(c.a,{onClose:this.handleClose},"Alert onClose=function"),e&&s.a.createElement(c.a,{type:"info"},e))}}]),t}(n.PureComponent)},1247:function(e,n){e.exports="/**\r\n * - onClose\r\n *    -- When the onClose property is set, the close button is displayed.\r\n *    -- When the onClose property is true, only hide the component.\r\n *    -- When the onClose is a function, call this function after hiding it.\r\n */\r\nimport React, { PureComponent } from 'react'\r\nimport { Alert } from 'megacosm'\r\n\r\nexport default class extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      placeholder: '',\r\n    }\r\n\r\n    this.handleClose = this.handleClose.bind(this)\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({\r\n      placeholder: 'Alert was dismissed.',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { placeholder } = this.state\r\n    return (\r\n      <div>\r\n        <Alert onClose>Alert onClose=true</Alert>\r\n\r\n        <Alert onClose={this.handleClose}>Alert onClose=function</Alert>\r\n\r\n        {placeholder && <Alert type=\"info\">{placeholder}</Alert>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"},1248:function(e,n,t){"use strict";t.r(n);var r=t(0),o=t.n(r),a=t(98);n.default=function(){return o.a.createElement("div",null,o.a.createElement(a.a,{type:"success",icon:!0},"Success Type."),o.a.createElement(a.a,{type:"info",icon:!0},"Info Type."),o.a.createElement(a.a,{type:"warning",icon:!0},"Warning Type."),o.a.createElement(a.a,{type:"danger",icon:!0},"Danger Type."),o.a.createElement(a.a,{icon:!0,iconSize:24,style:{padding:20}},o.a.createElement("h3",null,"Set iconSize"),"iconSize=24"))}},1249:function(e,n){e.exports='/**\r\n * - Icon\r\n *    -- Set the icon property to display the built-in icon.\r\n */\r\nimport React from "react";\r\nimport { Alert } from "megacosm";\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Alert type="success" icon>\r\n        Success Type.\r\n      </Alert>\r\n      <Alert type="info" icon>\r\n        Info Type.\r\n      </Alert>\r\n      <Alert type="warning" icon>\r\n        Warning Type.\r\n      </Alert>\r\n      <Alert type="danger" icon>\r\n        Danger Type.\r\n      </Alert>\r\n\r\n      <Alert icon iconSize={24} style={{ padding: 20 }}>\r\n        <h3>Set iconSize</h3>\r\n        iconSize=24\r\n      </Alert>\r\n    </div>\r\n  );\r\n}\r\n'}}]);