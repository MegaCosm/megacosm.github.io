(window.webpackJsonpMegacosmDoc=window.webpackJsonpMegacosmDoc||[]).push([[15],{1113:function(s,n,e){"use strict";e.r(n);var a=e(0),r=e.n(a),a=e(499),t=e(501),o=e(519),d=e(54),i=e(1114),i=e.n(i),l=Object(d.a)(i.a),u=[],d=(o.a.start(),o.a.setType("disabled"),e(1115),o.a.setType("example"),e(1116),o.a.setType("format"),e(1117),o.a.setType("onchange"),e(1118),o.a.setType("prediction"),e(1119),o.a.setType("separator"),e(1120),o.a.end()),m={disabled:{text:e(1121),log:d.disabled},example:{text:e(1122),log:d.example},format:{text:e(1123),log:d.format},onchange:{text:e(1124),log:d.onchange},prediction:{text:e(1125),log:d.prediction},separator:{text:e(1126),log:d.separator}};n.default=Object(a.a)(function(n){return r.a.createElement(t.b,Object.assign({},n,{codes:m,source:l,examples:u}))})},1114:function(n,e){n.exports="# Datum.List\r\n\r\n The auxiliary class that process the array values.\r\n \r\n## Example\r\n\r\nThe data used in the example on this page is as follows:\r\n```\r\nconst data = {\r\n  red: { id: 1, name: 'red' },\r\n  orange: { id: 2, name: 'orange' },\r\n  yellow: { id: 3, name: 'yellow' },\r\n  green: { id: 4, name: 'green' },\r\n  cyan: { id: 5, name: 'cyan' },\r\n  blue: { id: 6, name: 'blue' },\r\n  violet: { id: 7, name: 'violet' },\r\n}\r\n```\r\n\r\n<br />\r\n\r\n<code name=\"example\" />\r\n\r\n## Arguments\r\n\r\n### format  *null | string | function(d)*\r\nThe format is used to convert the original data object to the specified value.\r\n\r\n- **null** - When it is null, the return value is the original data.\r\n- **string** - When it is a string, it will get the value from the original data as the key, which is equivalent to (d) => d\\[format].\r\n- **function(d)** - d is the single original data.\r\n\r\n<code name=\"format\" />\r\n\r\n### onChange *function(value)*\r\nA callback function triggered when a value changes. Value is an array of the formatted data for the format function or string(separator is a string).\r\n\r\n<code name=\"onchange\" />\r\n\r\n### separator *null | string*\r\nWhen it is null, value is the Array format.\r\n\r\nWhen it is a string, value is a string delimited by the separator.\r\n\r\n<code name=\"separator\" />\r\n\r\n### prediction *function(val, d):bool*\r\nDetermine whether the value is consistent with the original data. If it is not set, this default prediction will be used:\r\n```\r\n(val, d) => val === format(d)\r\n```\r\n\r\n<code name=\"prediction\" />\r\n\r\n### disabled *function(d):bool*\r\nDetermines whether data items are disabled. If true, the add and remove functions will ignore this item.\r\n\r\n<code name=\"disabled\" />\r\n\r\n### value *array | string*\r\nThe initial value.\r\n\r\n## Methods\r\n\r\n### getValue *function():array|string*\r\nGet the current values. Return array or string depending on the separator setting.\r\n\r\n### setValue *function(array|string)*\r\nSet the value. The new value will replace the current value.\r\n\r\n### add *function(array|object)*\r\nAdd data. The value is the original data before being formatted.\r\n\r\n### remove *function(array|object)*\r\nRemove data. The value is the original data before being formatted.\r\n\r\n### clear *function*\r\nClear all data.\r\n"},1115:function(n,e,a){"use strict";a.r(e);e=a(70),a=a(516),e=new e.a.List({disabled:function(n){return"blue"===n.name||"red"===n.name},format:function(n){return n.name},onChange:function(n){console.log(n)}});e.setValue(["red"]),e.add([a.a.orange,a.a.blue]),e.remove([a.a.orange,a.a.red])},1116:function(n,e,a){"use strict";a.r(e);e=a(70),a=a(516),e=new e.a.List({format:"name",separator:",",prediction:function(n,e){return n===e.name},value:"blue",onChange:function(n){console.log(n)}});e.add(a.a.orange),e.add(a.a.green),e.remove(a.a.green),e.clear(),e.setValue("red,violet"),e.add(a.a.cyan)},1117:function(n,e,a){"use strict";a.r(e);var e=a(70),a=a(516),r=new e.a.List({});r.add(a.a.red),console.log(r.getValue()),(r=new e.a.List({format:function(n){return n.name}})).add(a.a.red),console.log(r.getValue()),(r=new e.a.List({format:function(n){return"".concat(n.id,"-").concat(n.name)}})).add(a.a.red),r.add(a.a.green),console.log(r.getValue())},1118:function(n,e,a){"use strict";a.r(e);e=a(70),a=a(516),e=new e.a.List({format:function(n){return n.name},onChange:function(n){console.log(n)}});e.setValue(["blue"]),e.add(a.a.red),e.add(a.a.orange),e.remove(a.a.red),e.clear()},1119:function(n,e,a){"use strict";a.r(e);e=a(70),a=a(516),e=new e.a.List({format:"id",separator:",",prediction:function(n,e){return parseInt(n,10)===e.id},value:"2,3"});e.add(a.a.red),console.log(e.getValue()),e.remove(a.a.orange),console.log(e.getValue())},1120:function(n,e,a){"use strict";a.r(e);function r(n){return console.log(n)}var e=a(70),a=a(516),t=new e.a.List({format:"id",value:[2,3],onChange:r});t.add(a.a.red),(t=new e.a.List({format:"name",onChange:r,separator:",",value:"red,yellow"})).add(a.a.blue),t.remove(a.a.yellow),(t=new e.a.List({format:"name",onChange:r,separator:"|",value:"red|yellow"})).add(a.a.cyan)},1121:function(n,e){n.exports="import { Datum } from 'megacosm'\r\nimport data from './data'\r\n\r\nconst datum = new Datum.List({\r\n  disabled: d => d.name === 'blue' || d.name === 'red',\r\n  format: d => d.name,\r\n  onChange(value) {\r\n    console.log(value)\r\n  },\r\n})\r\n\r\ndatum.setValue(['red'])\r\ndatum.add([data.orange, data.blue]) // orange, blue\r\ndatum.remove([data.orange, data.red]) // orange, red\r\n"},1122:function(n,e){n.exports="import { Datum } from 'megacosm'\r\nimport data from './data'\r\n\r\nconst datum = new Datum.List({\r\n  format: 'name',\r\n  separator: ',',\r\n  prediction: (val, d) => val === d.name,\r\n  value: 'blue',\r\n  onChange: values => {\r\n    console.log(values)\r\n  },\r\n})\r\ndatum.add(data.orange)\r\ndatum.add(data.green)\r\ndatum.remove(data.green)\r\ndatum.clear()\r\ndatum.setValue('red,violet')\r\ndatum.add(data.cyan)\r\n"},1123:function(n,e){n.exports="import { Datum } from 'megacosm'\r\nimport data from './data'\r\n\r\nlet datum = new Datum.List({})\r\ndatum.add(data.red)\r\nconsole.log(datum.getValue())\r\n\r\ndatum = new Datum.List({ format: d => d.name })\r\ndatum.add(data.red)\r\nconsole.log(datum.getValue())\r\n\r\ndatum = new Datum.List({ format: d => `${d.id}-${d.name}` })\r\ndatum.add(data.red)\r\ndatum.add(data.green)\r\nconsole.log(datum.getValue())\r\n"},1124:function(n,e){n.exports="import { Datum } from 'megacosm'\r\nimport data from './data'\r\n\r\nconst datum = new Datum.List({\r\n  format: d => d.name,\r\n  onChange(value) {\r\n    console.log(value)\r\n  },\r\n})\r\n\r\ndatum.setValue(['blue'])\r\ndatum.add(data.red)\r\ndatum.add(data.orange)\r\ndatum.remove(data.red)\r\ndatum.clear()\r\n"},1125:function(n,e){n.exports="import { Datum } from 'megacosm'\r\nimport data from './data'\r\n\r\nconst datum = new Datum.List({\r\n  format: 'id',\r\n  separator: ',',\r\n  prediction: (val, d) => parseInt(val, 10) === d.id,\r\n  value: '2,3',\r\n})\r\ndatum.add(data.red)\r\nconsole.log(datum.getValue())\r\ndatum.remove(data.orange)\r\nconsole.log(datum.getValue())\r\n"},1126:function(n,e){n.exports="import { Datum } from 'megacosm'\r\nimport data from './data'\r\n\r\nconst onChange = value => console.log(value)\r\n\r\nlet datum = new Datum.List({ format: 'id', value: [2, 3], onChange })\r\ndatum.add(data.red)\r\n\r\ndatum = new Datum.List({\r\n  format: 'name',\r\n  onChange,\r\n  separator: ',',\r\n  value: 'red,yellow',\r\n})\r\ndatum.add(data.blue)\r\ndatum.remove(data.yellow)\r\n\r\ndatum = new Datum.List({\r\n  format: 'name',\r\n  onChange,\r\n  separator: '|',\r\n  value: 'red|yellow',\r\n})\r\ndatum.add(data.cyan)\r\n"},516:function(n,e,a){"use strict";e.a={red:{id:1,name:"red"},orange:{id:2,name:"orange"},yellow:{id:3,name:"yellow"},green:{id:4,name:"green"},cyan:{id:5,name:"cyan"},blue:{id:6,name:"blue"},violet:{id:7,name:"violet"}}},519:function(n,e,a){"use strict";var r=a(3),t=a(4),o=window.console,d=function(){function n(){Object(r.a)(this,n),this.logs={default:[]},this.current=this.logs.default}return Object(t.a)(n,[{key:"setType",value:function(n){this.logs[n]||(this.logs[n]=[]),this.current=this.logs[n]}},{key:"log",value:function(){for(var n=arguments.length,e=new Array(n),a=0;a<n;a++)e[a]=arguments[a];var r=e.map(function(n){return"".concat(JSON.stringify(n,function(n,e){return"function"==typeof e?"fn#fn".concat(e.toString(),"fn#fn"):e},2))});this.current.push(r)}}]),n}();e.a={start:function(){window.console=new d},setType:function(n){window.console.setType(n)},end:function(){var n=window.console.logs;return window.console=o,n}}}}]);