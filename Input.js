(window.webpackJsonpMegacosmDoc=window.webpackJsonpMegacosmDoc||[]).push([[26],{849:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(486),o=n(487),i=n(45),r=n(850),r=n.n(r),s=Object(i.a)(r.a),p=[{name:"1-base",title:Object(i.a)("Base \n Input usually needs to be used with other components, so the default width is 100% and the default display is block. \n If the style.width is set, the default display is inline-flex."),component:n(851).default,rawText:n(852)},{name:"1-clearable",title:Object(i.a)("allow clear \n Input allow clear"),component:n(853).default,rawText:n(854)},{name:"2-size",title:Object(i.a)("Size \n There are three size of input, small, default, large."),component:n(855).default,rawText:n(856)},{name:"3-number",title:Object(i.a)("Number \n When type is number, it is forbidden to input non-numeric characters, and the number of decimal places is limited according to the digits property"),component:n(857).default,rawText:n(858)},{name:"4-number",title:Object(i.a)(""),component:n(859).default,rawText:n(860)},{name:"5-group",title:Object(i.a)("Group \n The Icon, span, string and Button types can be placed directly into the Input.Group. Use b tag can change the background color."),component:n(861).default,rawText:n(862)},{name:"6-tip",title:Object(i.a)("Tip \n The tip set on input pops up when it is focused."),component:n(863).default,rawText:n(864)},{name:"7-validate",title:Object(i.a)("Validate \n When the rules property is set, it will automatically verify the input data. When the popover property is set, it will pop up at the specified location. \n If the popover property is not set, no error message will pop up. \n If input is invalid, the message will not be hidden."),component:n(865).default,rawText:n(866)},{name:"8-disabled",title:Object(i.a)("Disabled \n Set the disabled property to disable the component."),component:n(867).default,rawText:n(868)},{name:"9-password",title:Object(i.a)("Password \n Input.Password is a mock input of type 'password', used for disable Chrome autofill."),component:n(869).default,rawText:n(870)}];t.default=Object(l.a)(function(e){return a.a.createElement(o.b,Object.assign({},e,{codes:void 0,source:s,examples:p}))})},850:function(e,t){e.exports="# Input\r\n\r\n<example />\r\n\r\n## API\r\n\r\n### Input\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| defaultValue | string \\| number | - | Default value |\r\n| delay | number | 400 | User input triggers the onChange and to check interval, unit: ms.|\r\n| name | string | none | The name of Form which access data |\r\n| onChange | (value: string) => void | - | The callback function when the value is changing |\r\n| onEnterPress | (value: string) => void | - | The callback function for enter key |\r\n| placeholder | string | - | Same as the native input tag |\r\n| popover | 'top-left' \\| 'top' \\| 'top-right' \\| 'bottom-left' \\| 'bottom' \\| 'bottom-right' | none | The position where the text pop up |\r\n| size | 'large' \\| 'default' \\| 'small' | 'default' | size of input |\r\n| style | object | - | Container element style |\r\n| tip | ReactNode | none | Prompt information |\r\n| trim | boolean | false | When trim is true, blank characters are automatically deleted when lose focusã€‚ |\r\n| type | string | 'text' | Same as the type of the native input tag |\r\n| value | string \\| number | - | The defaultValue and value can be set at the same time and defaultValue will be overridden by value<br />In the Form, the value will be taken over by the form and the value will lose efficacy. |\r\n| clearable | () => void \\| boolean | false | Remove content of the input when clicking the clear icon, clear event function |\r\n| coin | boolean | false | Show as thousands separator, valid only when type is 'number' |\r\n| info | (value: string) => string \\| number | - | Infomation |\r\n| popoverProps | object | none | Vilidate popup properties, specific properties refer to Popover component description |\r\n| maxLength | number | none | input max length |\r\n\r\n### Input.Number\r\n\r\nThe basic API is the same as the above table, and the specific API is as follows:\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| max | number | - | The maximum value |\r\n| min | number | - | The minimum value|\r\n| step | number | 1 | Change the digital span. It can be decimal. |\r\n| digits | number | - | the digits of number |\r\n| allowNull | boolean | false | allow value is null |\r\n| hideArrow | boolean | false | Whether to show increase/decrease buttons |\r\n| coin | boolean | false | Show as thousands separator |\r\n"},851:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(66);t.default=function(){return a.a.createElement(l.a,{placeholder:"input something"})}},852:function(e,t){e.exports="/**\r\n * - Base\r\n *    -- Input usually needs to be used with other components, so the default width is 100% and the default display is block.\r\n *    -- If the style.width is set, the default display is inline-flex.\r\n */\r\nimport React from 'react'\r\nimport { Input } from 'megacosm'\r\n\r\nexport default function() {\r\n  return <Input placeholder=\"input something\" />\r\n}\r\n"},853:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(66);t.default=function(){return a.a.createElement(l.a,{clearable:!0,placeholder:"input something"})}},854:function(e,t){e.exports="/**\r\n * - allow clear\r\n *    -- Input allow clear\r\n */\r\nimport React from 'react'\r\nimport { Input } from 'megacosm'\r\n\r\nexport default function() {\r\n  return <Input clearable placeholder=\"input something\" />\r\n}\r\n"},855:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(66),o={width:120,marginRight:12};t.default=function(){return a.a.createElement("div",null,a.a.createElement(l.a,{size:"small",style:o,placeholder:"small size"}),a.a.createElement(l.a,{style:o,placeholder:"default size"}),a.a.createElement(l.a,{size:"large",style:o,placeholder:"large size"}))}},856:function(e,t){e.exports='/**\r\n * - Size\r\n *    -- There are three size of input, small, default, large.\r\n */\r\nimport React from \'react\'\r\nimport { Input } from \'megacosm\'\r\n\r\nconst style = { width: 120, marginRight: 12 }\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Input size="small" style={style} placeholder="small size" />\r\n      <Input style={style} placeholder="default size" />\r\n      <Input size="large" style={style} placeholder="large size" />\r\n    </div>\r\n  )\r\n}\r\n'},857:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(66),o={marginBottom:12};t.default=function(){return a.a.createElement("div",{style:{width:300}},a.a.createElement(l.a,{style:o,type:"number",placeholder:"digits undefined"}),a.a.createElement(l.a,{style:o,digits:0,type:"number",placeholder:"digits 0"}),a.a.createElement(l.a,{style:o,digits:1,type:"number",placeholder:"digits 1"}),a.a.createElement(l.a,{style:o,digits:2,type:"number",placeholder:"digits 2"}),a.a.createElement(l.a,{style:o,digits:3,type:"number",placeholder:"digits 3"}))}},858:function(e,t){e.exports='/**\r\n * - Number\r\n *    -- When type is number, it is forbidden to input non-numeric characters, and the number of decimal places is limited according to the digits property\r\n */\r\nimport React from \'react\'\r\nimport { Input } from \'megacosm\'\r\n\r\nconst style = { marginBottom: 12 }\r\n\r\nexport default function() {\r\n  return (\r\n    <div style={{ width: 300 }}>\r\n      <Input style={style} type="number" placeholder="digits undefined" />\r\n      <Input style={style} digits={0} type="number" placeholder="digits 0" />\r\n      <Input style={style} digits={1} type="number" placeholder="digits 1" />\r\n      <Input style={style} digits={2} type="number" placeholder="digits 2" />\r\n      <Input style={style} digits={3} type="number" placeholder="digits 3" />\r\n    </div>\r\n  )\r\n}\r\n'},859:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(66);t.default=function(){return a.a.createElement(l.a.Number,{width:120,min:23,max:100,digits:0})}},860:function(e,t){e.exports="/**\r\n *  - \r\n *    -- Input.Number component can be assisted by mouse and up and down keyboard.\r\n */\r\nimport React from 'react'\r\nimport { Input } from 'megacosm'\r\n\r\nexport default function() {\r\n  return <Input.Number width={120} min={23} max={100} digits={0} />\r\n}\r\n"},861:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(66),o=n(55),i=n(156),s={width:300,marginBottom:12};t.default=function(){return a.a.createElement("div",null,a.a.createElement(l.a.Group,{style:s},a.a.createElement(i.a,{name:"user"}),a.a.createElement(l.a,{placeholder:"first name"}),"-",a.a.createElement(l.a,{placeholder:"last name"})),a.a.createElement(l.a.Group,{style:s},a.a.createElement(l.a,{placeholder:"search text"}),a.a.createElement(o.a,{text:!0},a.a.createElement(i.a,{name:"search"}))),a.a.createElement(l.a.Group,{style:s},a.a.createElement(l.a,{style:{flex:1},placeholder:"flex 1"}),a.a.createElement(l.a,{style:{flex:3},placeholder:"flex 3"})),a.a.createElement(l.a.Group,{style:s},a.a.createElement(l.a,{placeholder:"search text"}),a.a.createElement(o.a,{type:"primary"},"Search")),a.a.createElement(l.a.Group,{size:"small",style:s},a.a.createElement("b",null,a.a.createElement(i.a,{name:"envelope"})),a.a.createElement(l.a,{placeholder:"email"}),a.a.createElement("b",null,".com")))}},862:function(e,t){e.exports='/**\r\n * - Group\r\n *   -- The Icon, span, string and Button types can be placed directly into the Input.Group. Use b tag can change the background color.\r\n */\r\nimport React from \'react\'\r\nimport { Button, Input } from \'megacosm\'\r\nimport FontAwesome from \'../Icon/FontAwesome\'\r\n\r\nconst style = { width: 300, marginBottom: 12 }\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Input.Group style={style}>\r\n        <FontAwesome name="user" />\r\n        <Input placeholder="first name" />\r\n        -\r\n        <Input placeholder="last name" />\r\n      </Input.Group>\r\n\r\n      <Input.Group style={style}>\r\n        <Input placeholder="search text" />\r\n        <Button text>\r\n          <FontAwesome name="search" />\r\n        </Button>\r\n      </Input.Group>\r\n\r\n      <Input.Group style={style}>\r\n        <Input style={{ flex: 1 }} placeholder="flex 1" />\r\n        <Input style={{ flex: 3 }} placeholder="flex 3" />\r\n      </Input.Group>\r\n\r\n      <Input.Group style={style}>\r\n        <Input placeholder="search text" />\r\n        <Button type="primary">Search</Button>\r\n      </Input.Group>\r\n\r\n      <Input.Group size="small" style={style}>\r\n        <b>\r\n          <FontAwesome name="envelope" />\r\n        </b>\r\n        <Input placeholder="email" />\r\n        <b>.com</b>\r\n      </Input.Group>\r\n    </div>\r\n  )\r\n}\r\n'},863:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(66),o=n(156),i={marginBottom:12};t.default=function(){return a.a.createElement("div",{style:{width:300}},a.a.createElement(l.a,{style:i,placeholder:"email",tip:"enter you email.",popover:"top-left"}),a.a.createElement(l.a.Group,{style:i,tip:"enter you email."},a.a.createElement(o.a,{name:"envelope"}),a.a.createElement(l.a,{placeholder:"email"})),a.a.createElement(l.a.Group,{style:i},a.a.createElement(o.a,{name:"envelope"}),a.a.createElement(l.a,{tip:"enter you email.",placeholder:"email"})))}},864:function(e,t){e.exports='/**\r\n * - Tip\r\n *    -- The tip set on input pops up when it is focused.\r\n */\r\nimport React from \'react\'\r\nimport { Input } from \'megacosm\'\r\nimport FontAwesome from \'../Icon/FontAwesome\'\r\n\r\nconst style = { marginBottom: 12 }\r\n\r\nexport default function() {\r\n  return (\r\n    <div style={{ width: 300 }}>\r\n      <Input style={style} placeholder="email" tip="enter you email." popover="top-left" />\r\n\r\n      <Input.Group style={style} tip="enter you email.">\r\n        <FontAwesome name="envelope" />\r\n        <Input placeholder="email" />\r\n      </Input.Group>\r\n\r\n      <Input.Group style={style}>\r\n        <FontAwesome name="envelope" />\r\n        <Input tip="enter you email." placeholder="email" />\r\n      </Input.Group>\r\n    </div>\r\n  )\r\n}\r\n'},865:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),r=n(120),l=n(66),o=new r.b;t.default=function(){return a.a.createElement(l.a,{placeholder:"email",rules:[o.required],tip:"Email, required",popover:"top-left",width:300})}},866:function(e,t){e.exports='/**\r\n * - Validate\r\n *    -- When the rules property is set, it will automatically verify the input data. When the popover property is set, it will pop up at the specified location.\r\n *    -- If the popover property is not set, no error message will pop up.\r\n *    -- If input is invalid, the message will not be hidden.\r\n */\r\nimport React from \'react\'\r\nimport { Input, Rule } from \'megacosm\'\r\n\r\nconst rules = new Rule()\r\n\r\nexport default function() {\r\n  return <Input placeholder="email" rules={[rules.required]} tip="Email, required" popover="top-left" width={300} />\r\n}\r\n'},867:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(66),o={width:300,marginBottom:12};t.default=function(){return a.a.createElement("div",null,a.a.createElement(l.a.Group,{disabled:!0,style:o},a.a.createElement(l.a,{placeholder:"first name"}),"-",a.a.createElement(l.a,{placeholder:"last name"})),a.a.createElement(l.a,{disabled:!0,style:o,placeholder:"disabled input"}))}},868:function(e,t){e.exports='/**\r\n * - Disabled\r\n *    -- Set the disabled property to disable the component.\r\n */\r\nimport React from \'react\'\r\nimport { Input } from \'megacosm\'\r\n\r\nconst style = { width: 300, marginBottom: 12 }\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Input.Group disabled style={style}>\r\n        <Input placeholder="first name" />\r\n        -\r\n        <Input placeholder="last name" />\r\n      </Input.Group>\r\n\r\n      <Input disabled style={style} placeholder="disabled input" />\r\n    </div>\r\n  )\r\n}\r\n'},869:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(66);t.default=function(){return a.a.createElement(l.a.Password,{placeholder:"input password"})}},870:function(e,t){e.exports="/**\r\n * - Password\r\n *    -- Input.Password is a mock input of type 'password', used for disable Chrome autofill.\r\n */\r\nimport React from 'react'\r\nimport { Input } from 'megacosm'\r\n\r\nexport default function() {\r\n  return <Input.Password placeholder=\"input password\" />\r\n}\r\n"}}]);