(window.webpackJsonpMegacosmDoc=window.webpackJsonpMegacosmDoc||[]).push([[48],{1216:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),d=t(486),o=t(487),i=t(45),r=t(1217),r=t.n(r),l=Object(i.a)(r.a),s=[{name:"01-base",title:Object(i.a)("Base \n Basic usage of Tree"),component:t(1218).default,rawText:t(1219)},{name:"02-icon",title:Object(i.a)("Icons \n Display different icon in the renderItem."),component:t(1220).default,rawText:t(1221)},{name:"03-click",title:Object(i.a)("Click \n Set the onClick property to listen the node click."),component:t(1222).default,rawText:t(1223)},{name:"04-noline",title:Object(i.a)("Line \n Set the line property to false to hid the connecting line."),component:t(1224).default,rawText:t(1225)},{name:"05-expanded",title:Object(i.a)("Expanded \n Controlled expansion (Because the data in this example is too large, it will be slower for the first time.)"),component:t(1226).default,rawText:t(1227)},{name:"06-change",title:Object(i.a)("onChange \n Selected values provide 4 modes \n 0: Return only the fully selected node, including the parent node. \n 1: Return the fully selected nodes and semi-selected parent nodes. \n 2: Return only the selected child node. \n 3: Return only the parent node, if the parent node is selected. \n 4: What you choose is what you get."),component:t(1228).default,rawText:t(1229)},{name:"07-disabled",title:Object(i.a)("disabled \n When the disabled property is a function, disable the node and its child nodes according to the returned result. \n When the disabled property is true, disable all nodes."),component:t(1230).default,rawText:t(1231)},{name:"08-drag",title:Object(i.a)("Drag \n Set the onDrop property to drag nodes."),component:t(1232).default,rawText:t(1233)},{name:"08-styledrag",title:Object(i.a)("Set the drag style \n Some drag settings can be defined by dragImageSelector, dragImageStyle, dragHoverExpand"),component:t(1234).default,rawText:t(1235)},{name:"09-lazyload",title:Object(i.a)("Lazy load \n Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded."),component:t(1236).default,rawText:t(1237)},{name:"data",title:Object(i.a)(""),component:t(1238).default,rawText:t(1239)}];n.default=Object(d.a)(function(e){return a.a.createElement(o.b,Object.assign({},e,{codes:void 0,source:l,examples:s}))})},1217:function(e,n){e.exports="# Tree\r\n\r\n##\r\n\r\n#### The data used on this page is as follows (the amount of data is large, please be careful)\r\n<example name=\"data\" />\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| className | string | - | Extend className |\r\n| data | object[] | [] | data. The child node is children. If the children value is null or its length is 0, it is render as a leaf node. |\r\n| defaultExpanded | string[] | - | Default expanded node key. |\r\n| disabled | (data: any) => boolean \\| boolean | false | When it is true, all nodes disable the selection; when it is a function, it determines whether it is disabled according to the return result of the function. |\r\n| expanded | string[] | - | Expanded node key (controlled) |\r\n| keygen | ((data: any, parentKey: string) => string) \\| string | required | Auxiliary method for generating key. <br />When it is a function, use the return value of this function. <br /> When it is a string, use the data value corresponding to this string. For example, 'id' is the same thing as (d) => d.id. |\r\n| line | boolean | true | Whether to display the connection line. |\r\n| loader | (key: string) => void | - | If the loader attribute is a function, the node with no children is regarded as dynamically loaded node. Click expanded button to trigger the loader event. The children property is null or its length is 0 will be regarded as a leaf node. |\r\n| mode | 0 \\| 1 \\| 2 \\| 3 \\| 4 | 1 | mode <br />0: Returns only the fully selected node including the parent node. <br />1: Returns all selected nodes and semi-selected nodes. <br />2: Return only the selected child nodes. <br />3: If the parent node is full selected, only return the parent node.<br />4: What you choose is what you get. |\r\n| onChange | (value: string[]) => void | - | When the onChange property is set, the selection box is displayed. The parameter is the current selected value, which is related to the mode property. |\r\n| onExpand |  (value: string[]) => void | - | The callback function for expanding the node. The parameter is the key array of the currently expanded nodes. |\r\n| renderItem | (data: object) => ReactNode | required | When it is a string, return d\\[string].<br /> When it is a function, return the result of this function. |\r\n| defaultValue | string[] | - | Default selected key (not controlled) | \r\n| value | string[] | - | Selected key (controlled) |\r\n| onDrop | (data: object, key: string, targetKey: string, position: number) => void | - | It is draggable when setting the onDrop property. <br />data: Full data after dragging.<br />key: the key of dragged node<br />targetKey: the key of target node<br />position: The position of the target node. start at 0. | \r\n| defaultExpandAll | boolean | false | default expand all nodes | \r\n| childrenKey | string | 'children' | the key of the children data name | \r\n| expandIcons | \\[ReactNode, ReactNode] | none | custom expand/collapse button |\r\n| dragImageSelector | (data: object) => string \\| string | - | the selector of drag image |\r\n| dragImageStyle | object | - | the style of drag Image |\r\n| leafClass | (data: object) => string \\| string | - | the class of lead, the params of function is data |\r\n| dragHoverExpand | boolean | false | auto expand the node when drag over |\r\n| doubleClickExpand | boolean | false | expand node while double click |\r\n| onClick | (data: object) => void | none | node click |\r\n| iconClass | string | - | expand/collapse button's class |\r\n| nodeClass | string \\| ((data: any) => string) | - | The class of the node, if it is a function, the parameter is the node data. |\r\n| dragSibling | boolean  | - | whether drag can only be level |"},1218:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),d=t(117),o=[{id:"1",text:"1",children:[{id:"1-1",text:"1-1",children:[{id:"1-1-1",text:"1-1-1"},{id:"1-1-2",text:"1-1-2"}]},{id:"1-2",text:"1-2"}]},{id:"2",text:"2",children:[{id:"2-1",text:"2-1"},{id:"2-2",text:"2-2"}]},{id:"3",text:"3",children:[{id:"3-1",text:"3-1"}]},{id:"4",text:"4",children:[{id:"4-1",text:"4-1"}]},{id:"5",text:"5",children:[{id:"5-1",text:"5-1"}]}];n.default=function(){return a.a.createElement(d.a,{data:o,keygen:"id",defaultExpanded:["2"],renderItem:function(e){return"node ".concat(e.text)}})}},1219:function(e,n){e.exports="/**\r\n * - Base\r\n *   -- Basic usage of Tree\r\n */\r\nimport React from 'react'\r\nimport { Tree } from 'megacosm'\r\n\r\nconst data = [\r\n  {\r\n    id: '1',\r\n    text: '1',\r\n    children: [\r\n      {\r\n        id: '1-1',\r\n        text: '1-1',\r\n        children: [\r\n          { id: '1-1-1', text: '1-1-1' },\r\n          { id: '1-1-2', text: '1-1-2' },\r\n        ],\r\n      },\r\n      { id: '1-2', text: '1-2' },\r\n    ],\r\n  },\r\n  {\r\n    id: '2',\r\n    text: '2',\r\n    children: [\r\n      { id: '2-1', text: '2-1' },\r\n      { id: '2-2', text: '2-2' },\r\n    ],\r\n  },\r\n  { id: '3', text: '3', children: [{ id: '3-1', text: '3-1' }] },\r\n  { id: '4', text: '4', children: [{ id: '4-1', text: '4-1' }] },\r\n  { id: '5', text: '5', children: [{ id: '5-1', text: '5-1' }] },\r\n]\r\n\r\nexport default function() {\r\n  return <Tree data={data} keygen=\"id\" defaultExpanded={['2']} renderItem={n => `node ${n.text}`} />\r\n}\r\n"},1220:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),d=t(117),o=t(493),i=t(156);function l(e,n){n=e.children&&0!==e.children.length?n?a.a.createElement(i.a,{name:"folder-open",style:{color:"#ffd666"}}):a.a.createElement(i.a,{name:"folder",style:{color:"#ffd666"}}):a.a.createElement(i.a,{name:"file-text-o"});return a.a.createElement("span",null,n," ",e.text)}n.default=function(){return a.a.createElement(d.a,{data:o.c,keygen:"id",renderItem:l,doubleClickExpand:!0})}},1221:function(e,n){e.exports="/**\r\n * - Icons\r\n *    -- Display different icon in the renderItem.\r\n */\r\nimport React from 'react'\r\nimport { Tree } from 'megacosm'\r\nimport data from 'doc/data/tree'\r\nimport FontAwesome from '../Icon/FontAwesome'\r\n\r\nfunction renderItem(node, isExpanded) {\r\n  let icon\r\n  if (!node.children || node.children.length === 0) {\r\n    icon = <FontAwesome name=\"file-text-o\" />\r\n  } else if (isExpanded) {\r\n    icon = <FontAwesome name=\"folder-open\" style={{ color: '#ffd666' }} />\r\n  } else {\r\n    icon = <FontAwesome name=\"folder\" style={{ color: '#ffd666' }} />\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {icon} {node.text}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default function() {\r\n  return <Tree data={data} keygen=\"id\" renderItem={renderItem} doubleClickExpand />\r\n}\r\n"},1222:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var r=t(4),a=t(5),d=t(6),o=t(7),n=t(0),i=t.n(n),l=t(44),s=t(117),c=t(493),u=function(e){Object(d.a)(t,e);var n=Object(o.a)(t);function t(e){var a;return Object(r.a)(this,t),(a=n.call(this,e)).handleClick=function(e,n){console.log("click",n),a.setState({active:n})},a.handleEdit=function(e){var n=e.target.value,r=a.state.active.split(",");a.setState(Object(l.a)(function(e){var t=e.data;r.forEach(function(n,e){t=t.find(function(e){return e.id===n}),e<r.length-1&&(t=t.children)}),t.text=n,e.active=void 0}))},a.handleKeyDown=function(e){13===e.keyCode&&e.target.blur()},a.keyGenerator=function(e,n){return"".concat(n,",").concat(e.id).replace(/^,/,"")},a.renderItem=function(e,n,t){return t?i.a.createElement("input",{autoFocus:!0,size:"small",onBlur:a.handleEdit,onKeyDown:a.handleKeyDown,defaultValue:e.text,type:"text"}):"node ".concat(e.text)},a.state={active:void 0,data:c.c},a.defaultExpanded=["1"],a}return Object(a.a)(t,[{key:"render",value:function(){return i.a.createElement(s.a,{active:this.state.active,data:this.state.data,keygen:this.keyGenerator,defaultExpanded:this.defaultExpanded,onClick:this.handleClick,onExpand:this.handleExpand,renderItem:this.renderItem})}}]),t}(n.Component)},1223:function(e,n){e.exports="/**\r\n * - Click\r\n *    -- Set the onClick property to listen the node click.\r\n */\r\nimport React, { Component } from 'react'\r\nimport immer from 'immer'\r\nimport { Tree } from 'megacosm'\r\nimport tree from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { active: undefined, data: tree }\r\n    this.defaultExpanded = ['1']\r\n  }\r\n\r\n  handleClick = (node, id) => {\r\n    console.log('click', id)\r\n    this.setState({ active: id })\r\n  }\r\n\r\n  handleEdit = event => {\r\n    const newText = event.target.value\r\n    const path = this.state.active.split(',')\r\n    this.setState(\r\n      immer(draft => {\r\n        let { data } = draft\r\n        path.forEach((id, index) => {\r\n          data = data.find(d => d.id === id)\r\n          if (index < path.length - 1) data = data.children\r\n        })\r\n        data.text = newText\r\n        draft.active = undefined\r\n      })\r\n    )\r\n  }\r\n\r\n  handleKeyDown = event => {\r\n    if (event.keyCode === 13) event.target.blur()\r\n  }\r\n\r\n  keyGenerator = (node, parentKey) => `${parentKey},${node.id}`.replace(/^,/, '')\r\n\r\n  renderItem = (node, isExpanded, isActive) =>\r\n    isActive ? (\r\n      <input\r\n        // eslint-disable-next-line\r\n        autoFocus\r\n        size=\"small\"\r\n        onBlur={this.handleEdit}\r\n        onKeyDown={this.handleKeyDown}\r\n        defaultValue={node.text}\r\n        type=\"text\"\r\n      />\r\n    ) : (\r\n      `node ${node.text}`\r\n    )\r\n\r\n  render() {\r\n    return (\r\n      <Tree\r\n        active={this.state.active}\r\n        data={this.state.data}\r\n        keygen={this.keyGenerator}\r\n        defaultExpanded={this.defaultExpanded}\r\n        onClick={this.handleClick}\r\n        onExpand={this.handleExpand}\r\n        renderItem={this.renderItem}\r\n      />\r\n    )\r\n  }\r\n}\r\n"},1224:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),d=t(117),o=t(493);n.default=function(){return a.a.createElement(d.a,{data:o.c,defaultExpanded:["1","2"],line:!1,keygen:"id",renderItem:function(e){return"node ".concat(e.id)}})}},1225:function(e,n){e.exports="/**\r\n * - Line\r\n *    -- Set the line property to false to hid the connecting line.\r\n */\r\nimport React from 'react'\r\nimport { Tree } from 'megacosm'\r\nimport data from 'doc/data/tree'\r\n\r\nexport default function() {\r\n  return <Tree data={data} defaultExpanded={['1', '2']} line={false} keygen=\"id\" renderItem={n => `node ${n.id}`} />\r\n}\r\n"},1226:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var a=t(24),d=t(4),o=t(5),i=t(2),l=t(6),s=t(7),n=t(0),c=t.n(n),u=t(54),h=t(117),p=t(493),r=function(e){Object(l.a)(r,e);var t=Object(s.a)(r);function r(e){var n;return Object(d.a)(this,r),(n=t.call(this,e)).handleExpand=function(e){n.setState({expanded:e})},n.renderItem=function(e){return"node ".concat(e.id)},n.state={expanded:["1"]},n.collapseAll=n.handleExpand.bind(Object(i.a)(n),[]),n.expandAll=n.handleExpand.bind(Object(i.a)(n),Object(a.a)(p.a)),n}return Object(o.a)(r,[{key:"render",value:function(){return c.a.createElement("div",null,c.a.createElement("div",{style:{marginBottom:12}},c.a.createElement(u.a,{onClick:this.expandAll},"Expand all"),c.a.createElement(u.a,{onClick:this.collapseAll},"Collapse all")),c.a.createElement(h.a,{data:p.c,keygen:"id",line:!1,expanded:this.state.expanded,onExpand:this.handleExpand,renderItem:this.renderItem}))}}]),r}(n.Component)},1227:function(e,n){e.exports="/**\r\n * - Expanded\r\n *    -- Controlled expansion (Because the data in this example is too large, it will be slower for the first time.)\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Button, Tree } from 'megacosm'\r\nimport data, { allIds } from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { expanded: ['1'] }\r\n\r\n    this.collapseAll = this.handleExpand.bind(this, [])\r\n    this.expandAll = this.handleExpand.bind(this, [...allIds])\r\n  }\r\n\r\n  handleExpand = expanded => {\r\n    this.setState({ expanded })\r\n  }\r\n\r\n  renderItem = node => `node ${node.id}`\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ marginBottom: 12 }}>\r\n          <Button onClick={this.expandAll}>Expand all</Button>\r\n          <Button onClick={this.collapseAll}>Collapse all</Button>\r\n        </div>\r\n        <Tree\r\n          data={data}\r\n          keygen=\"id\"\r\n          line={false}\r\n          expanded={this.state.expanded}\r\n          onExpand={this.handleExpand}\r\n          renderItem={this.renderItem}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"},1228:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var a=t(4),d=t(5),o=t(6),i=t(7),l=t(27),n=t(0),s=t.n(n),c=t(286),u=t(117),h=t(493),p={position:"absolute",right:30,top:100,bottom:40,width:240,overflow:"auto",background:"#f2f2f2",padding:10,zIndex:100},m=[{value:0,text:"mode=0 (full)"},{value:1,text:"mode=1 (half)"},{value:2,text:"mode=2 (child only)"},{value:3,text:"mode=3 (shallow)"},{value:4,text:"mode=4 (freedom)"}];var r=function(e){Object(o.a)(r,e);var t=Object(i.a)(r);function r(e){var n;Object(a.a)(this,r),(n=t.call(this,e)).handleChange=function(e){n.setState({value:e})},n.handleModeChange=function(e){n.setState({mode:e,value:[]})},n.renderItem=function(e){return"node ".concat(e.id)};e=[];return function e(n,t){n=Object(l.a)(n,1)[0];n&&(t.push(n.id),n.children&&e(n.children,t))}(h.c,e),n.state={mode:1,value:e},n}return Object(d.a)(r,[{key:"render",value:function(){var e=this.state,n=e.mode,e=e.value;return s.a.createElement("div",null,s.a.createElement(c.a.Group,{keygen:"value",value:n,format:"value",onChange:this.handleModeChange,data:m,renderItem:"text"}),s.a.createElement("br",null),s.a.createElement(u.a,{data:h.c,defaultExpanded:["0","2"],keygen:"id",mode:n,onChange:this.handleChange,renderItem:this.renderItem,value:e}),s.a.createElement("div",{style:p},"Current select value:",s.a.createElement("pre",{style:{background:"#f2f2f2"}},JSON.stringify(e,null,2))))}}]),r}(n.Component)},1229:function(e,n){e.exports="/**\r\n * - onChange\r\n *    -- Selected values provide 4 modes\r\n *    -- 0: Return only the fully selected node, including the parent node.\r\n *    -- 1: Return the fully selected nodes and semi-selected parent nodes.\r\n *    -- 2: Return only the selected child node.\r\n *    -- 3: Return only the parent node, if the parent node is selected.\r\n *    -- 4: What you choose is what you get.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Tree, Radio } from 'megacosm'\r\nimport data from 'doc/data/tree'\r\n\r\nconst resultStyle = {\r\n  position: 'absolute',\r\n  right: 30,\r\n  top: 100,\r\n  bottom: 40,\r\n  width: 240,\r\n  overflow: 'auto',\r\n  background: '#f2f2f2',\r\n  padding: 10,\r\n  zIndex: 100,\r\n}\r\n\r\nconst modeList = [\r\n  { value: 0, text: 'mode=0 (full)' },\r\n  { value: 1, text: 'mode=1 (half)' },\r\n  { value: 2, text: 'mode=2 (child only)' },\r\n  { value: 3, text: 'mode=3 (shallow)' },\r\n  { value: 4, text: 'mode=4 (freedom)' },\r\n]\r\n\r\nfunction getValue(list, value) {\r\n  const [node] = list\r\n  if (!node) return\r\n  value.push(node.id)\r\n  if (node.children) getValue(node.children, value)\r\n}\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    const value = []\r\n    getValue(data, value)\r\n\r\n    this.state = { mode: 1, value }\r\n  }\r\n\r\n  handleChange = value => {\r\n    this.setState({ value })\r\n  }\r\n\r\n  handleModeChange = mode => {\r\n    this.setState({ mode, value: [] })\r\n  }\r\n\r\n  renderItem = node => `node ${node.id}`\r\n\r\n  render() {\r\n    const { mode, value } = this.state\r\n\r\n    return (\r\n      <div>\r\n        <Radio.Group\r\n          keygen=\"value\"\r\n          value={mode}\r\n          format=\"value\"\r\n          onChange={this.handleModeChange}\r\n          data={modeList}\r\n          renderItem=\"text\"\r\n        />\r\n\r\n        <br />\r\n\r\n        <Tree\r\n          data={data}\r\n          defaultExpanded={['0', '2']}\r\n          keygen=\"id\"\r\n          mode={mode}\r\n          onChange={this.handleChange}\r\n          renderItem={this.renderItem}\r\n          value={value}\r\n        />\r\n\r\n        <div style={resultStyle}>\r\n          Current select value:\r\n          <pre style={{ background: '#f2f2f2' }}>{JSON.stringify(value, null, 2)}</pre>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"},1230:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return a});var o=t(4),r=t(5),i=t(6),l=t(7),n=t(0),s=t.n(n),c=t(117),u=t(493),a=function(e){Object(i.a)(d,e);var a=Object(l.a)(d);function d(){var e;Object(o.a)(this,d);for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return(e=a.call.apply(a,[this].concat(t))).handleChange=function(e){console.log(e)},e.isDisabled=function(e){return"1-0"===e.id},e.renderItem=function(e){return"node ".concat(e.id)},e}return Object(r.a)(d,[{key:"render",value:function(){return s.a.createElement(c.a,{data:u.c,defaultExpanded:["1","2"],disabled:this.isDisabled,keygen:"id",onChange:this.handleChange,renderItem:this.renderItem})}}]),d}(n.Component)},1231:function(e,n){e.exports="/**\r\n * - disabled\r\n *    -- When the disabled property is a function, disable the node and its child nodes according to the returned result.\r\n *    -- When the disabled property is true, disable all nodes.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Tree } from 'megacosm'\r\nimport data from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n  handleChange = value => {\r\n    console.log(value)\r\n  }\r\n\r\n  isDisabled = node => node.id === '1-0'\r\n\r\n  renderItem = node => `node ${node.id}`\r\n\r\n  render() {\r\n    return (\r\n      <Tree\r\n        data={data}\r\n        defaultExpanded={['1', '2']}\r\n        disabled={this.isDisabled}\r\n        keygen=\"id\"\r\n        onChange={this.handleChange}\r\n        renderItem={this.renderItem}\r\n      />\r\n    )\r\n  }\r\n}\r\n"},1232:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var r=t(4),a=t(5),d=t(6),o=t(7),n=t(0),i=t.n(n),l=t(117),s=t(493),c=function(e){Object(d.a)(t,e);var n=Object(o.a)(t);function t(e){var a;return Object(r.a)(this,t),(a=n.call(this,e)).handleDrop=function(e,n,t,r){console.log(e,n,t,r),a.setState({data:e})},a.renderItem=function(e){return i.a.createElement("div",null,i.a.createElement("span",null,"node "),i.a.createElement("span",{id:"node-id-".concat(e.id)},e.text))},a.state={data:s.c},a.defaultExpanded=["1"],a}return Object(a.a)(t,[{key:"render",value:function(){return i.a.createElement(l.a,{data:this.state.data,keygen:"id",defaultExpanded:this.defaultExpanded,onDrop:this.handleDrop,renderItem:this.renderItem})}}]),t}(n.Component)},1233:function(e,n){e.exports="/**\r\n * - Drag\r\n *    -- Set the onDrop property to drag nodes.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Tree } from 'megacosm'\r\nimport tree from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { data: tree }\r\n    this.defaultExpanded = ['1']\r\n  }\r\n\r\n  handleDrop = (data, key, targetKey, position) => {\r\n    console.log(data, key, targetKey, position)\r\n    this.setState({ data })\r\n  }\r\n\r\n  renderItem = node => (\r\n    <div>\r\n      <span>node </span>\r\n      <span id={`node-id-${node.id}`}>{node.text}</span>\r\n    </div>\r\n  )\r\n\r\n  render() {\r\n    return (\r\n      <Tree\r\n        data={this.state.data}\r\n        keygen=\"id\"\r\n        defaultExpanded={this.defaultExpanded}\r\n        onDrop={this.handleDrop}\r\n        renderItem={this.renderItem}\r\n      />\r\n    )\r\n  }\r\n}\r\n"},1234:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var r=t(4),a=t(5),d=t(6),o=t(7),n=t(0),i=t.n(n),l=t(117),s=t(493),c=function(e){Object(d.a)(t,e);var n=Object(o.a)(t);function t(e){var a;return Object(r.a)(this,t),(a=n.call(this,e)).handleDrop=function(e,n,t,r){console.log(e,n,t,r),a.setState({data:e})},a.renderItem=function(e){return i.a.createElement("div",null,i.a.createElement("span",null,"node "),i.a.createElement("span",{id:"node-id-".concat(e.id)},e.text))},a.state={data:s.c},a.defaultExpanded=["1"],a}return Object(a.a)(t,[{key:"render",value:function(){return i.a.createElement(l.a,{data:this.state.data,keygen:"id",defaultExpanded:this.defaultExpanded,onDrop:this.handleDrop,dragImageSelector:function(e){return"#node-id-".concat(e.id)},dragImageStyle:{color:"red"},renderItem:this.renderItem,dragHoverExpand:!0})}}]),t}(n.Component)},1235:function(e,n){e.exports="/**\r\n * - Set the drag style\r\n *    -- Some drag settings can be defined by dragImageSelector, dragImageStyle, dragHoverExpand\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Tree } from 'megacosm'\r\nimport tree from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { data: tree }\r\n    this.defaultExpanded = ['1']\r\n  }\r\n\r\n  handleDrop = (data, key, targetKey, position) => {\r\n    console.log(data, key, targetKey, position)\r\n    this.setState({ data })\r\n  }\r\n\r\n  renderItem = node => (\r\n    <div>\r\n      <span>node </span>\r\n      <span id={`node-id-${node.id}`}>{node.text}</span>\r\n    </div>\r\n  )\r\n\r\n  render() {\r\n    return (\r\n      <Tree\r\n        data={this.state.data}\r\n        keygen=\"id\"\r\n        defaultExpanded={this.defaultExpanded}\r\n        onDrop={this.handleDrop}\r\n        dragImageSelector={d => `#node-id-${d.id}`}\r\n        dragImageStyle={{ color: 'red' }}\r\n        renderItem={this.renderItem}\r\n        dragHoverExpand\r\n      />\r\n    )\r\n  }\r\n}\r\n"},1236:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var a=t(24),d=t(4),o=t(5),i=t(6),l=t(7),n=t(0),s=t.n(n),c=t(44),u=t(117),h=["0","1","2","3","4"].map(function(e){return{id:e}}),r=function(e){Object(i.a)(r,e);var t=Object(l.a)(r);function r(e){var n;return Object(d.a)(this,r),(n=t.call(this,e)).loader=function(e){var r=e.split(",");setTimeout(function(){n.setState(Object(c.a)(function(e){var t=e.data;r.forEach(function(n,e){t=t.find(function(e){return e.id===n}),e<r.length-1&&(t=t.children)}),t.children=Object(a.a)(Array.from({length:Math.round(4*Math.random())},function(e,n){return n}).map(function(e){return{id:"".concat(t.id,"-").concat(e)}}))}))},500)},n.keyGenerator=function(e,n){return"".concat(n,",").concat(e.id).replace(/^,/,"")},n.handleChange=function(e){return n.setState({value:e})},n.renderItem=function(e){return"node ".concat(e.id)},n.state={data:h,value:[]},n}return Object(o.a)(r,[{key:"render",value:function(){return s.a.createElement(u.a,{data:this.state.data,keygen:this.keyGenerator,loader:this.loader,renderItem:this.renderItem,onChange:this.handleChange,value:this.state.value})}}]),r}(n.Component)},1237:function(e,n){e.exports="/**\r\n * - Lazy load\r\n *    -- Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded.\r\n */\r\nimport React, { Component } from 'react'\r\nimport immer from 'immer'\r\nimport { Tree } from 'megacosm'\r\n\r\nconst initData = ['0', '1', '2', '3', '4'].map(i => ({ id: i }))\r\nconst createRange = () => Array.from({ length: Math.round(Math.random() * 4) }, (_, i) => i)\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { data: initData, value: [] }\r\n  }\r\n\r\n  loader = key => {\r\n    const path = key.split(',')\r\n\r\n    setTimeout(() => {\r\n      this.setState(\r\n        immer(draft => {\r\n          let { data } = draft\r\n          path.forEach((pid, i) => {\r\n            data = data.find(d => d.id === pid)\r\n            if (i < path.length - 1) data = data.children\r\n          })\r\n          data.children = [...createRange().map(i => ({ id: `${data.id}-${i}` }))]\r\n        })\r\n      )\r\n    }, 500)\r\n  }\r\n\r\n  keyGenerator = (node, parentKey) => `${parentKey},${node.id}`.replace(/^,/, '')\r\n\r\n  handleChange = value => this.setState({ value })\r\n\r\n  renderItem = node => `node ${node.id}`\r\n\r\n  render() {\r\n    return (\r\n      <Tree\r\n        data={this.state.data}\r\n        keygen={this.keyGenerator}\r\n        loader={this.loader}\r\n        renderItem={this.renderItem}\r\n        onChange={this.handleChange}\r\n        value={this.state.value}\r\n      />\r\n    )\r\n  }\r\n}\r\n"},1238:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var a=t(4),d=t(5),o=t(6),i=t(7),n=t(0),l=t.n(n),s=t(493),r=function(e){Object(o.a)(r,e);var t=Object(i.a)(r);function r(e){var n;return Object(a.a)(this,r),(n=t.call(this,e)).toggle=function(){n.setState({expand:!n.state.expand})},n.state={expand:!1},n}return Object(d.a)(r,[{key:"render",value:function(){var e=this.state.expand;return l.a.createElement("div",null,"Current node count: ",s.a.length,"."," ",l.a.createElement("a",{onClick:this.toggle},e?"Collapse":"Expand"," Code"),l.a.createElement("pre",{style:{display:e?"block":"none"}},JSON.stringify(s.c,null,2)))}}]),r}(n.Component)},1239:function(e,n){e.exports="import React, { Component } from 'react'\r\nimport data, { allIds } from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { expand: false }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({ expand: !this.state.expand })\r\n  }\r\n\r\n  render() {\r\n    const { expand } = this.state\r\n    return (\r\n      <div>\r\n        Current node count: {allIds.length}.{' '}\r\n        <a onClick={this.toggle}>\r\n          {expand ? 'Collapse' : 'Expand'} Code\r\n        </a>\r\n        <pre style={{ display: expand ? 'block' : 'none' }}>{JSON.stringify(data, null, 2)}</pre>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"},286:function(e,n,t){"use strict";var r=t(20),a=t(46),d=t(57),s=t(489),o=t(4),i=t(5),l=t(2),c=t(26),u=t(21),h=t(6),p=t(7),m=t(0),f=t.n(m),m=t(15),g=t.n(m),m=t(19),x=t(22),y=t(10),b=t(1),v=t(157),k=t(16),t=function(e){Object(h.a)(t,e);var n=Object(p.a)(t);function t(e){return Object(o.a)(this,t),(e=n.call(this,e)).handleClick=e.handleClick.bind(Object(l.a)(e)),e.handleUpdate=e.forceUpdate.bind(Object(l.a)(e)),e.handleRawChange=e.handleRawChange.bind(Object(l.a)(e)),e}return Object(i.a)(t,[{key:"componentDidMount",value:function(){Object(c.a)(Object(u.a)(t.prototype),"componentDidMount",this).call(this),this.props.datum.subscribe(y.a,this.handleUpdate)}},{key:"componentWillUnmount",value:function(){Object(c.a)(Object(u.a)(t.prototype),"componentWillUnmount",this).call(this),this.props.datum.unsubscribe(y.a,this.handleUpdate)}},{key:"getContent",value:function(e,n){var t=this.props.renderItem;return"string"==typeof t?e[t]:"function"==typeof t?t(e,n):""}},{key:"handleClick",value:function(e,n,t){var r=this.props,a=r.data;r.datum.set(a[t])}},{key:"handleRawChange",value:function(e){this.props.datum.set(e)}},{key:"render",value:function(){var t=this,e=this.props,n=e.block,r=e.data,a=e.datum,d=e.keygen,o=e.children,i=e.button,l=e.size,e=Object(k.b)(),e=g()(Object(b.h)("group",n&&"block",i&&"button","outline"===i&&"outline",i&&l,e&&"rtl"),this.props.className);return void 0===r?f.a.createElement("div",{className:e},f.a.createElement(s.a,{value:{onRawChange:this.handleRawChange,checked:a.check.bind(a)}},o)):f.a.createElement("div",{className:e},r.map(function(e,n){return f.a.createElement(v.a,{checked:a.check(e),disabled:a.disabled(e),key:Object(x.b)(e,d,n),htmlValue:n,index:n,onChange:t.handleClick},t.getContent(e,n))}),o)}}]),t}(m.b);t.defaultProps={renderItem:function(e){return e}};m=t,t=Object(s.b)(v.a);t.Group=Object(r.compose)(a.a,d.a.hoc({limit:1,bindProps:["disabled","format","prediction"],pure:!1}))(m),t.displayName="MegacosmRadio",t.Group.displayName="MegacosmRadioGroup";n.a=t},489:function(e,n,t){"use strict";t.d(n,"a",function(){return d}),t.d(n,"b",function(){return o});var n=t(0),r=t.n(n),n=t(32),a=t.n(n)()(),d=a.Provider,o=function(t){return function(n){return r.a.createElement(a.Consumer,null,function(e){return r.a.createElement(t,Object.assign({},n,e))})}}}}]);