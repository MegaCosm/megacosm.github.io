(window.webpackJsonpMegacosmDoc=window.webpackJsonpMegacosmDoc||[]).push([[53],{1498:function(r,n){r.exports='## Install\r\n\r\ninstall from npm\r\n```\r\n$ npm install megacosm\r\n```\r\n\r\nuse tag from a CDN\r\n```\r\n<script crossorigin src="https://unpkg.com/megacosm/dist/megacosm.min.js"><\/script>\r\n<link rel="stylesheet" href="https://unpkg.com/megacosm/dist/theme.default.css" />\r\n```\r\n\r\n\r\n## Usage\r\n``` js\r\nimport { Table } from \'megacosm\'\r\n\r\n<Table />\r\n```\r\n\r\n## Configuration\r\n\r\n### theme\r\n\r\nIn addition to its own megacosm theme, there are two sets of theme built in, default and the theme \'antd\' that is compatible with ant-design(Convenient for the mixing of two component libraries and just the color matching is close, the interaction and interface parameters are different.)\r\n\r\nYou can switch topics by modifying the webpack\'s less-loader configuration.\r\n```\r\n{\r\n  loader: \'less-loader\',\r\n  options: {\r\n    modifyVars: {\r\n      \'so-theme\': \'antd\'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### The prefix of css\r\n\r\nBy default, the css code is isolated by prefix. The default prefix is \'so\' and does not need to modified normally. If you wang to modify this value, modify the less-loader configuration of the webpack.\r\n```\r\n{\r\n  loader: \'less-loader\',\r\n  options: {\r\n    modifyVars: {\r\n      \'so-prefix\': \'your-prefix\'\r\n    }\r\n  }\r\n}\r\n``` \r\n\r\nSet config in the project.\r\n\r\n```\r\nimport config from \'megacosm/config\'\r\nconfig.setConfig({\r\n  prefix: \'your-prefix\'\r\n})\r\n```\r\n```\r\n// or modify the process.env of webpack\r\nplugins: [\r\n  new webpack.DefinePlugin({\r\n    \'process.env\': {\r\n      SO_PREFIX: JSON.stringify(\'your-prefix\'),\r\n    },\r\n  }),\r\n],\r\n```\r\n\r\n### CSS Module\r\n\r\nIf you need to use the CSS Module, modify the css-loader configuration of the webpack firstly.\r\n```\r\n{\r\n  loader: \'css-loader\',\r\n  options: {\r\n    modules: true,\r\n    localIdentName: \'[local]--[hash:base64:5]\'\r\n  }\r\n}\r\n```\r\n\r\nSet the config.cssmodule to true at the application entrance\r\n```\r\nimport config from \'megacosm/config\'\r\nconfig.setConfig({\r\n  cssModule: true\r\n})\r\n\r\n```\r\n```\r\n// or modify the process.env of webpack\r\nplugins: [\r\n  new webpack.DefinePlugin({\r\n    \'process.env\': {\r\n      CSS_MODULE: true\r\n    },\r\n  }),\r\n],\r\n```\r\n\r\n### Input delay\r\n\r\nInput delay refers to the user\'s input trigger onchange and check interval. Input, Textarea and Editablearea components have this function, and the default is 400ms.\r\n\r\nYou can change the global delay time by setting config.delay.\r\n\r\n```\r\nimport config from \'megacosm/config\'\r\nconfig.setConfig({\r\n  delay: 0\r\n})\r\n\r\n```\r\n\r\n\r\n## Use Megacosm In Create React App\r\n\r\n<br />\r\n\r\n[create-react-app](https://facebook.github.io/create-react-app/)  is the official React app build tool from Facebook.\r\n\r\n### Installation and Building\r\n\r\nYou need to install create-react-app with npm:\r\n\r\n```\r\n$ npm i -g create-react-app\r\n```\r\n\r\nCreate a new React projectï¼š\r\n\r\n```\r\n$ create-react-app first-megacosm-demo\r\n```\r\n\r\nDuring the create-react-app will automatically help you to install dependencies without npm.\r\n\r\nThen we go inside first-megacosm-demo and start it:\r\n\r\n```\r\n$ cd first-megacosm-demo\r\n$ npm start\r\n```\r\n\r\nAt this point, the browser will automatically open http://localhost:3000/.\r\n\r\n\r\n### Import megacosm\r\n\r\nVia npm install:\r\n\r\n```\r\n$ npm i megacosm\r\n```\r\n\r\nModify `src/App.js`, import `<Button />` from megacosm.\r\n\r\n```\r\nimport React, { Component } from \'react\';\r\nimport \'./App.css\';\r\n+ import { Button } from \'megacosm\'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className="App">\r\n        + <Button type="success">Success Button</Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nModify `src/App.css`, add `megacosm/dist/theme.default.css` at the top of the file.\r\n\r\n```\r\n+ @import \'~megacosm/dist/theme.default.css\';\r\n\r\n.App {\r\n  text-align: center;\r\n}\r\n\r\n...\r\n```\r\n\r\nYou can also import the style of antd:\r\n\r\n```\r\n- @import \'~megacosm/dist/theme.default.css\';\r\n+ @import \'~megacosm/dist/theme.antd.css\';\r\n\r\n.App {\r\n  text-align: center;\r\n}\r\n\r\n...\r\n```\r\n\r\nVisit other workflows of [create-react-app](https://facebook.github.io/create-react-app/) at its User Guide.\r\n\r\n### Advanced configuration\r\n\r\nThe relevant components of the megacosm component library are already included in the project, but there are some hidden dangers from the actual development, because the required styles of all components have just been introduced in `src/App.css`. However, in actual development we may only use one components, so some adjustments are made to the configuration of `create-react-app`.\r\n\r\nImport [rescripts](https://github.com/harrysolovay/rescripts) and Modify package.json.\r\n\r\n```\r\n$ npm i @rescripts/cli\r\n```\r\n\r\nModify `package.json`:\r\n\r\n```\r\n...\r\n"scripts": {\r\n-   "start": "react-scripts start",\r\n+   "start": "rescripts start",\r\n-   "build": "react-scripts build",\r\n+   "build": "rescripts build",\r\n-   "test": "react-scripts test",\r\n+   "test": "rescripts test",\r\n-   "eject": "react-scripts eject"\r\n}\r\n...\r\n```\r\n\r\nCreate a `.rescriptsrc.js` in root directory.\r\n\r\n```\r\nmodule.exports = [];\r\n```\r\n\r\n### Use babel-plugin-import\r\n\r\n[babel-plugin-import](https://github.com/ant-design/babel-plugin-import) create by antd and is a babel plugin.\r\n\r\n```\r\n$ npm i babel-plugin-import @rescripts/rescript-use-babel-config\r\n```\r\n\r\nModify .rescriptsrc.js file, add Babel configuration:\r\n\r\n```\r\nmodule.exports = [\r\n+   [\'use-babel-config\', \'.babelrc\']\r\n];\r\n```\r\n\r\ncreate .babelrc file:\r\n\r\n```\r\n{\r\n  "presets": ["react-app"],\r\n  "plugins": [\r\n    [\r\n      "import", \r\n      { \r\n        "libraryName": "megacosm", \r\n        "libraryDirectory": "css", // import css \r\n        "style": false,\r\n        "camel2DashComponentName": false,\r\n        "camel2UnderlineComponentName": false\r\n      }\r\n    ]\r\n  ]\r\n}\r\n```\r\n\r\n`libraryDirectory` set css, because the compiled folder for less and jsx under the css directory structure.\r\n\r\n### Modify Theme\r\n\r\nModifying the theme requires compiling less , it is necessary to introduce rewrite less related content.\r\n\r\n1. Modify .babelrc file\r\n\r\n```\r\n{\r\n  "presets": ["react-app"],\r\n  "plugins": [\r\n    [\r\n      "import", \r\n      { \r\n        "libraryName": "megacosm", \r\n-       "libraryDirectory": "css", // import css \r\n+       "libraryDirectory": "lib", // import lib \r\n        "style": false,\r\n        "camel2DashComponentName": false,\r\n        "camel2UnderlineComponentName": false\r\n      }\r\n    ]\r\n  ]\r\n}\r\n```\r\n1. \bInstall `rescript-use-rewire` and `react-app-rewire-less`.\r\n   \r\n```\r\n$ npm i @rescripts/rescript-use-rewire react-app-rewire-less\r\n```\r\n3. Modify `.rescript.js` file\r\n\r\n```\r\n+ const rewireLess = require(\'react-app-rewire-less\');\r\n\r\nmodule.exports = [\r\n  [\'use-babel-config\', \'.babelrc\'],\r\n+ [ \r\n+   \'use-rewire\',\r\n+   rewireLess.withLoaderOptions({ \r\n+     modifyVars: { \'so-theme\': \'antd\' }, // change theme to antd\r\n+     javascriptEnabled: true\r\n+   })\r\n+ ]\r\n];\r\n```\r\n\r\n4. Re-run `npm start`.\r\n\r\n## I18N\r\n\r\nSome components (Datepicker, Select, Model, etc..) has build in text, default pack is \'es-US\', set the webpack process.env to \'zh-CN\' changes the language pack to Chinese.\r\n```\r\nplugins: [\r\n  new webpack.DefinePlugin({\r\n    \'process.env\': {\r\n      LOCALE: JSON.stringify(\'zh-CN\'),\r\n    },\r\n  }),\r\n],\r\n```\r\n\r\nIf you use Megacosm form a CDN, you can call the setLocale method of locale.\r\n\r\n```\r\nimport { setLocale } from \'megacosm\'\r\nsetLocale(\'zh-CN\')\r\n```\r\n\r\nOther language or part of the set can be passed in a Json data.\r\n\r\n```\r\nsetLocale({ ok: \'yes\' })\r\n```\r\n\r\nThe current locale content is as follows:\r\n\r\n<example name="locale" />'}}]);