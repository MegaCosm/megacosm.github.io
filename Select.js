(window.webpackJsonpMegacosmDoc=window.webpackJsonpMegacosmDoc||[]).push([[37],{933:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(486),i=n(487),o=n(45),r=n(934),r=n.n(r),d=Object(o.a)(r.a),c=[{name:"01-base",title:Object(o.a)("Base \n Select generate group of options from data."),component:n(935).default,rawText:n(936)},{name:"01-cadapt",title:Object(o.a)(" \n options auto adapt width"),component:n(937).default,rawText:n(938)},{name:"01-multiple",title:Object(o.a)("Multiple \n Set the multiple property to true, it is multi-selection."),component:n(939).default,rawText:n(940)},{name:"01-o-compressed",title:Object(o.a)(" \n Set the compressed property to compress values, hover to show all values."),component:n(941).default,rawText:n(942)},{name:"02-format",title:Object(o.a)("Datum \n Set format property to format the data object to the specified value."),component:n(943).default,rawText:n(944)},{name:"02-group",title:Object(o.a)("GroupBy \n Grouping data by groupBy. \n The component will group the content by the return value of the function. If the return is empty, the default is not grouped. To prevent ambiguity, it is recommended to have a default grouping."),component:n(945).default,rawText:n(946)},{name:"04-clearable",title:Object(o.a)("Clearable \n Set the clearable property to true, the clear icon will be displayed on hover."),component:n(947).default,rawText:n(948)},{name:"04-size",title:Object(o.a)("Size \n There are three sizes, ['small', default, 'large']"),component:n(949).default,rawText:n(950)},{name:"06-bigdata",title:Object(o.a)("Performance \n Select uses a lazy loading to optimize performance. This example loads 10,000 pieces of data."),component:n(951).default,rawText:n(952)},{name:"07-disabled",title:Object(o.a)("Disabled \n Set the disabled property to disable the component."),component:n(953).default,rawText:n(954)},{name:"08-filter",title:Object(o.a)("Filter - built-in \n When the onFilter property returns a function, use this function to do front-end filtering."),component:n(955).default,rawText:n(956)},{name:"09-filter",title:Object(o.a)("Filter - server \n When the onFilter property don't return a function, you can filter data from server or filter by yourself."),component:n(957).default,rawText:n(958)},{name:"10-filter",title:Object(o.a)(" \n Example: Server-side filters multiple selection."),component:n(959).default,rawText:n(960)},{name:"11-create",title:Object(o.a)("Create by input \n Set the onCreate property can create options by inputting."),component:n(961).default,rawText:n(962)},{name:"12-create",title:Object(o.a)(" \n Example: Create options with filter"),component:n(963).default,rawText:n(964)},{name:"13-absolute",title:Object(o.a)("Absolute \n If the parent container of the pop-up layer is occluded, you can set the absolute property to make the pop-up options rendered in a separate layer. (not recommended if not necessary)"),component:n(965).default,rawText:n(966)},{name:"14-columns-default",title:Object(o.a)("Columns \n Set columns property over 1, options will display in multiple columns."),component:n(967).default,rawText:n(968)},{name:"14-columns-stack",title:Object(o.a)(" \n Set columns -1, options will display end by end， columnsWidth is the width of the option box"),component:n(969).default,rawText:n(970)},{name:"15-treeData",title:Object(o.a)("Tree Select \n Set treeData to select with tree."),component:n(971).default,rawText:n(972)},{name:"16-onFilter",title:Object(o.a)("Tree Select Filter \n Set onFilter to filter tree data."),component:n(973).default,rawText:n(974)},{name:"17-result",title:Object(o.a)("result \n use renderRsult. to format the result"),component:n(975).default,rawText:n(976)}];t.default=Object(l.a)(function(e){return a.a.createElement(i.b,Object.assign({},e,{codes:void 0,source:d,examples:c}))})},934:function(e,t){e.exports="# Select\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| width | number | null | width |\r\n| style | object | null | expand style |\r\n| absolute | boolean | false | When it is true, the pop-up layer of option append into document.body. |\r\n| autoAdapt | boolean | false | option list is auto adapt |\r\n| clearable | boolean | false | If clearable is true, show clear value icon |\r\n| multiple | boolean | false | if it is true, it will be multiple selection |\r\n| columns | number | 1 | Option columns.  |\r\n| columnWidth | number | 160 | Option column width, only effective when columns > 1 |\r\n| data | any[] | required | Options data |\r\n| treeData | any[] | - | tree select data，\\[{children: []}\\] |\r\n| defaultValue | any[] | | Initial value |\r\n| disabled | (data: any) => boolean \\| boolean | false | When the value is true, disabled all checkboxes; When the value is function, disable the checkbox that this function returns true. |\r\n| filterDelay | number | 400 | ms. The delay of user input triggering filter events |\r\n| format | (data: any) => any \\| string | d => d | Format value<br />The defaule value is return the original data.<br />When it is a string, the value is fetched from the original data as a key equivalent to (d) => d\\[format\\]<br />When it is a function, use its return value. |\r\n| name | string | - | The name of a Form that accesses data |\r\n| keygen | ((data: any) => string) \\| string \\| true | index | Generate a auxiliary method for each key<br />If not filled, index will be used(not recommended,there may be problems with more than 10 data)<br />When it is a function, use its return value.<br />When it is a string，ues the value of the string.For example, 'id' is the same thing as (d) => d.id. |\r\n| onChange | (value: any, data: any, checked: boolean) => void | - | value is the datum.getValue(). |\r\n| onCreate | (input: string) => any \\| boolean | - | If the onCreate event is set, the component is inputable.<br />When onCreate is a function, the return value of this function is diaplay at the top as a new option.<br />When onCreate is true, use the built-in functuon text => text. |\r\n| onFilter | (text: string) => (data: any) => boolean | - | When the onFilter is not empty, you can filter data by input.<br />If the onFilter returns a function, use this function as a front-end filter.<br />If return undefined, you can do your own backend filtering. |\r\n| prediction | (value: any, data: any) => boolean | (val, d) => val===format(d) | By default, the result of the format function is used to compare whether it matches. In some cases (for example, whe an object that returns the original data is updated, an different option with the same value  is generated), the prediction function needs to be used to determine whether match |\r\n| renderItem | (data: any) => ReactNode \\| string | required | When it is a string, return d\\[string]<br />When it is a function, return the result of the function. |\r\n| renderResult | (data: any) => ReactNode \\| string | renderItem | The content displayed in the result after selecting, if not set, use renderItem |\r\n| value | any[] \\| string \\| object | | In the Form, the value will be taken over by the form and the value will be invalid. |\r\n| compressed | boolean \\| 'no-repeat' | false | Merges selected values, valid only in multiselect mode; the first value will not appear in the Popover when it is'no-repeat'. |\r\n| zIndex | number | 1000 | options z-index |\r\n| groupBy | (record: any, index: number, data: any) => any | - | group by | \r\n| filterSingleSelect | boolean | false | blur to select the data when filter data has only single. only work in filter. |\r\n| separator | string | none | set with multiple, value will separator by this |\r\n| childrenKey | string | 'children' | treeData，the key of the children data name | \r\n| defaultExpandAll| boolean | false | expand all node, only in can be use in treeData | \r\n| renderUnmatched | (data: any) => ReactNode | none | the way to render not matched data value |\r\n| emptyAfterSelect | boolean | false | empty input after select value |\r\n| showArrow | boolean | true | show dropdown arrow, only single select |\r\n| showHitDescendants | boolean | false | Whether to show the descendant nodes of the hit node after filtering |\r\n| focusSelected | boolean | true | selected value while click under onCreate or onFilter |\r\n| noCache | boolean | false | data cache, if data change asynchronously, better set true |\r\n| compressedClassName | string | none | compressed popover classname |\r\n| onCollapse | (collapse: boolean) => void | none | option list collapse callback |\r\n| resultClassName | ((value: any) => string) \\| string | none | The className of the selected result content container |\r\n| columnsTitle | ReactNode | none | title of columns multiple select |\r\n| reFocus | boolean | false | There are onFilter and onCreate, select Option, automatically focus Input |\r\n| header | () => ReactNode \\| ReactNode | null | Custom render option list header |\r\n| lineHeight | number | 34 | Option height. List items are rendered using virtual lists, and when the option height changes, the correct height should be specified via lineHeight |\r\n| hideCreateOption | boolean | false | hide the creat option while set onCreate |"},935:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return a.a.createElement(l.a,{keygen:!0,style:{width:240},data:i,defaultValue:""})}},936:function(e,t){e.exports="/**\r\n * - Base\r\n *    -- Select generate group of options from data.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return <Select keygen style={{ width: 240 }} data={data} defaultValue=\"\" />\r\n}\r\n"},937:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=["red","orange","this option is so long long long long long","green","cyan","blue","violet"];t.default=function(){return a.a.createElement(l.a,{keygen:!0,absolute:!0,autoAdapt:!0,style:{width:240},data:i,defaultValue:""})}},938:function(e,t){e.exports="/**\r\n * - \r\n *    --  options auto adapt width\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'this option is so long long long long long', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return <Select keygen absolute autoAdapt style={{ width: 240 }} data={data} defaultValue=\"\" />\r\n}\r\n"},939:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return s});var a=n(4),r=n(5),l=n(6),i=n(7),t=n(0),o=n.n(t),d=n(164),c=[{id:"red"},{id:"orange"},{id:"yellow"},{id:"green"},{id:"cyan"},{id:"blue"},{id:"violet"}],s=function(e){Object(l.a)(n,e);var t=Object(i.a)(n);function n(e){var r;return Object(a.a)(this,n),(r=t.call(this,e)).handleChange=function(e,t,n){console.log(e,t,n),r.setState({value:e})},r.state={value:"pink"},r}return Object(r.a)(n,[{key:"render",value:function(){return o.a.createElement(d.a,{style:{width:300,marginBottom:15},data:c,keygen:"id",multiple:!0,placeholder:"Multiple select",onChange:this.handleChange,value:this.state.value,renderItem:"id",format:"id"})}}]),n}(t.Component)},940:function(e,t){e.exports="/**\r\n * - Multiple\r\n *    -- Set the multiple property to true, it is multi-selection.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = [\r\n  { id: 'red' },\r\n  { id: 'orange' },\r\n  { id: 'yellow' },\r\n  { id: 'green' },\r\n  { id: 'cyan' },\r\n  { id: 'blue' },\r\n  { id: 'violet' },\r\n]\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { value: 'pink' }\r\n  }\r\n\r\n  handleChange = (value, d, c) => {\r\n    console.log(value, d, c)\r\n    this.setState({ value })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Select\r\n        style={{ width: 300, marginBottom: 15 }}\r\n        data={data}\r\n        keygen=\"id\"\r\n        multiple\r\n        placeholder=\"Multiple select\"\r\n        onChange={this.handleChange}\r\n        value={this.state.value}\r\n        renderItem=\"id\"\r\n        format=\"id\"\r\n      />\r\n    )\r\n  }\r\n}\r\n"},941:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=[{id:"red"},{id:"orange"},{id:"yellow"},{id:"green"},{id:"cyan"},{id:"blue"},{id:"violet"}];t.default=function(){return a.a.createElement(l.a,{compressed:!0,style:{width:300},data:i,keygen:"id",multiple:!0,placeholder:"Multiple select Compressed",renderItem:"id",format:"id"})}},942:function(e,t){e.exports="/**\r\n * - \r\n *    -- Set the compressed property to compress values, hover to show all values.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = [\r\n  { id: 'red' },\r\n  { id: 'orange' },\r\n  { id: 'yellow' },\r\n  { id: 'green' },\r\n  { id: 'cyan' },\r\n  { id: 'blue' },\r\n  { id: 'violet' },\r\n]\r\n\r\nexport default function() {\r\n  return (\r\n    <Select\r\n      compressed\r\n      style={{ width: 300 }}\r\n      data={data}\r\n      keygen=\"id\"\r\n      multiple\r\n      placeholder=\"Multiple select Compressed\"\r\n      renderItem=\"id\"\r\n      format=\"id\"\r\n    />\r\n  )\r\n}\r\n"},943:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=[{id:1,city:"Osaka-Kobe-Kyoto"},{id:2,city:"Dhaka"},{id:3,city:"Pune"},{id:4,city:"Buenos Aires"},{id:5,city:"Nanjing"},{id:6,city:"Accra"},{id:7,city:"Chongqing"},{id:8,city:"Dongguan"},{id:9,city:"Bandung"},{id:10,city:"Bogota"}],o={width:240,marginBottom:12,display:"block"};t.default=function(){return a.a.createElement("div",null,a.a.createElement(l.a,{data:i,format:"id",keygen:"id",defaultValue:3,prediction:function(e,t){return e===t.id},style:o,placeholder:"Select a city",renderItem:"city"}),a.a.createElement(l.a,{data:i,multiple:!0,keygen:"id",defaultValue:[3,4],format:"id",placeholder:"Select citys",renderItem:"city"}))}},944:function(e,t){e.exports="/**\r\n * - Datum\r\n *    -- Set format property to format the data object to the specified value.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst citys = [\r\n  { id: 1, city: 'Osaka-Kobe-Kyoto' },\r\n  { id: 2, city: 'Dhaka' },\r\n  { id: 3, city: 'Pune' },\r\n  { id: 4, city: 'Buenos Aires' },\r\n  { id: 5, city: 'Nanjing' },\r\n  { id: 6, city: 'Accra' },\r\n  { id: 7, city: 'Chongqing' },\r\n  { id: 8, city: 'Dongguan' },\r\n  { id: 9, city: 'Bandung' },\r\n  { id: 10, city: 'Bogota' },\r\n]\r\nconst style = { width: 240, marginBottom: 12, display: 'block' }\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Select\r\n        data={citys}\r\n        format=\"id\"\r\n        keygen=\"id\"\r\n        defaultValue={3}\r\n        prediction={(v, d) => v === d.id}\r\n        style={style}\r\n        placeholder=\"Select a city\"\r\n        renderItem=\"city\"\r\n      />\r\n\r\n      <Select\r\n        data={citys}\r\n        multiple\r\n        keygen=\"id\"\r\n        defaultValue={[3, 4]}\r\n        format=\"id\"\r\n        placeholder=\"Select citys\"\r\n        renderItem=\"city\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"},945:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=[{value:"Beijing",tag:"1"},{value:"China",tag:"2"},{value:"Shanghai",tag:"1"},{value:"Mars",tag:"3"}];t.default=function(){return a.a.createElement(l.a,{groupBy:function(e){return"1"===e.tag?"City":"2"===e.tag?"Country":"Other"},keygen:"value",style:{width:240},data:i,renderItem:"value"})}},946:function(e,t){e.exports="/**\r\n * - GroupBy\r\n *    -- Grouping data by groupBy.\r\n *    -- The component will group the content by the return value of the function. If the return is empty, the default is not grouped. To prevent ambiguity, it is recommended to have a default grouping.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = [\r\n  { value: 'Beijing', tag: '1' },\r\n  { value: 'China', tag: '2' },\r\n  { value: 'Shanghai', tag: '1' },\r\n  { value: 'Mars', tag: '3' },\r\n]\r\n\r\nexport default function() {\r\n  return (\r\n    <Select\r\n      groupBy={d => {\r\n        if (d.tag === '1') return 'City'\r\n        if (d.tag === '2') return 'Country'\r\n        return 'Other'\r\n      }}\r\n      keygen=\"value\"\r\n      style={{ width: 240 }}\r\n      data={data}\r\n      renderItem=\"value\"\r\n    />\r\n  )\r\n}\r\n"},947:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return a.a.createElement("div",null,a.a.createElement(l.a,{style:{width:240,marginBottom:12},clearable:!0,keygen:!0,data:i,placeholder:"Select color"}),a.a.createElement("br",null),a.a.createElement(l.a,{style:{width:300},data:i,clearable:!0,keygen:!0,multiple:!0,placeholder:"Multiple select",resultClassName:function(e){return console.log("resultClassName value: ",e),"result-class-name-".concat(e)}}))}},948:function(e,t){e.exports="/**\r\n * - Clearable\r\n *    -- Set the clearable property to true, the clear icon will be displayed on hover.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Select style={{ width: 240, marginBottom: 12 }} clearable keygen data={data} placeholder=\"Select color\" />\r\n      <br />\r\n      <Select\r\n        style={{ width: 300 }}\r\n        data={data}\r\n        clearable\r\n        keygen\r\n        multiple\r\n        placeholder=\"Multiple select\"\r\n        resultClassName={value => {\r\n          console.log('resultClassName value: ', value)\r\n          return `result-class-name-${value}`\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"},949:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){var e={data:i,keygen:!0,style:{width:100,marginRight:12}};return a.a.createElement("div",null,a.a.createElement(l.a,Object.assign({},e,{size:"small",placeholder:"small"})),a.a.createElement(l.a,Object.assign({},e,{placeholder:"default"})),a.a.createElement(l.a,Object.assign({},e,{size:"large",placeholder:"large"})))}},950:function(e,t){e.exports="/**\r\n * - Size\r\n *    -- There are three sizes, ['small', default, 'large']\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  const props = { data, keygen: true, style: { width: 100, marginRight: 12 } }\r\n\r\n  return (\r\n    <div>\r\n      <Select {...props} size=\"small\" placeholder=\"small\" />\r\n      <Select {...props} placeholder=\"default\" />\r\n      <Select {...props} size=\"large\" placeholder=\"large\" />\r\n    </div>\r\n  )\r\n}\r\n"},951:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),n=n(488),i=Object(n.b)(1e4),o={width:240,marginBottom:12,display:"block"};t.default=function(){return a.a.createElement(l.a,{data:i,datum:{format:"id"},keygen:"id",defaultValue:3,style:o,placeholder:"Select a user",renderItem:function(e,t){return"".concat(e.firstName," ").concat(e.lastName," (").concat(t+1,")")},renderResult:function(e){return"".concat(e.firstName," ").concat(e.lastName)}})}},952:function(e,t){e.exports="/**\r\n * - Performance\r\n *    -- Select uses a lazy loading to optimize performance. This example loads 10,000 pieces of data.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\nimport { fetchSync as fetchUser } from 'doc/data/user'\r\n\r\nconst users = fetchUser(10000)\r\nconst style = { width: 240, marginBottom: 12, display: 'block' }\r\n\r\nexport default function() {\r\n  return (\r\n    <Select\r\n      data={users}\r\n      datum={{ format: 'id' }}\r\n      keygen=\"id\"\r\n      defaultValue={3}\r\n      style={style}\r\n      placeholder=\"Select a user\"\r\n      renderItem={(user, i) => `${user.firstName} ${user.lastName} (${i + 1})`}\r\n      renderResult={user => `${user.firstName} ${user.lastName}`}\r\n    />\r\n  )\r\n}\r\n"},953:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return a.a.createElement("div",null,a.a.createElement(l.a,{style:{width:240,marginBottom:12},disabled:!0,keygen:!0,data:i,placeholder:"Select color"}),a.a.createElement("br",null),a.a.createElement(l.a,{style:{width:300},data:i,disabled:function(e){return"green"===e},keygen:!0,multiple:!0,defaultValue:["orange","green"],placeholder:"Multiple select"}))}},954:function(e,t){e.exports="/**\r\n * - Disabled\r\n *    -- Set the disabled property to disable the component.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Select style={{ width: 240, marginBottom: 12 }} disabled keygen data={data} placeholder=\"Select color\" />\r\n      <br />\r\n      <Select\r\n        style={{ width: 300 }}\r\n        data={data}\r\n        disabled={d => d === 'green'}\r\n        keygen\r\n        multiple\r\n        defaultValue={['orange', 'green']}\r\n        placeholder=\"Multiple select\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"},955:function(e,t,n){"use strict";n.r(t);var r,a=n(17),l=n(4),i=n(5),o=n(2),d=n(6),c=n(7),s=n(0),u=n.n(s),s=n(164),m=["red","orange","yellow","green","cyan","blue","violet"],h=(r=s.a,s=n=function(e){Object(d.a)(n,e);var t=Object(c.a)(n);function n(e){return Object(l.a)(this,n),(e=t.call(this,e)).state={filterText:void 0},e.handlerFilter=e.handlerFilter.bind(Object(o.a)(e)),e.renderItem=e.renderItem.bind(Object(o.a)(e)),e.handleReset=e.handleReset.bind(Object(o.a)(e)),e}return Object(i.a)(n,[{key:"handlerFilter",value:function(e){var t=this.props.onFilter;return this.setState({filterText:e}),t(e)}},{key:"handleReset",value:function(){var e=this.props.beforeChange;e&&e.apply(void 0,arguments),this.setState({filterText:void 0})}},{key:"renderItem",value:function(e,t){var n=this.props,r=n.renderItem,a=n.highlightStyle,l=this.state.filterText,r="function"==typeof r?r(e,t):e[r];return!l||"string"!=typeof r?r:r.split(l).map(function(e,t,n){return t===n.length-1?u.a.createElement(u.a.Fragment,{key:t},e):u.a.createElement(u.a.Fragment,{key:t},e,u.a.createElement("span",{style:a},l))})}},{key:"render",value:function(){var e=Object(a.a)(Object(a.a)({},this.props),{},{onFilter:this.props.onFilter?this.handlerFilter:void 0,renderItem:this.renderItem,beforeChange:this.handleReset});return u.a.createElement(r,e)}}]),n}(u.a.Component),n.defaultProps={renderItem:function(e){return e},highlightStyle:{color:"#FF4E50"}},s);t.default=function(){return u.a.createElement("div",null,u.a.createElement(h,{style:{width:240,marginBottom:12},data:m,keygen:!0,placeholder:"Select color",onFilter:function(t){return function(e){return 0<=e.indexOf(t)}},renderResult:function(e){return e}}),u.a.createElement("br",null),u.a.createElement(h,{style:{width:300},multiple:!0,keygen:!0,data:m,placeholder:"Select color",onFilter:function(t){return function(e){return 0<=e.indexOf(t)}},renderResult:function(e){return e}}))}},956:function(e,t){e.exports="/**\r\n * - Filter - built-in\r\n *    -- When the onFilter property returns a function, use this function to do front-end filtering.\r\n */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nconst highlight = Component =>\r\n  class extends React.Component {\r\n    static propTypes = {\r\n      onFilter: PropTypes.func,\r\n      renderItem: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n      highlightStyle: PropTypes.object,\r\n      beforeChange: PropTypes.func,\r\n    }\r\n\r\n    static defaultProps = {\r\n      renderItem: d => d,\r\n      highlightStyle: { color: '#FF4E50' },\r\n    }\r\n\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        filterText: undefined,\r\n      }\r\n      this.handlerFilter = this.handlerFilter.bind(this)\r\n      this.renderItem = this.renderItem.bind(this)\r\n      this.handleReset = this.handleReset.bind(this)\r\n    }\r\n\r\n    handlerFilter(text) {\r\n      const { onFilter } = this.props\r\n      this.setState({ filterText: text })\r\n      return onFilter(text)\r\n    }\r\n\r\n    handleReset(...args) {\r\n      const { beforeChange } = this.props\r\n      if (beforeChange) beforeChange(...args)\r\n      this.setState({ filterText: undefined })\r\n    }\r\n\r\n    renderItem(d, index) {\r\n      const { renderItem, highlightStyle } = this.props\r\n      const { filterText } = this.state\r\n      const result = typeof renderItem === 'function' ? renderItem(d, index) : d[renderItem]\r\n      if (!filterText) return result\r\n      if (typeof result !== 'string') return result\r\n      return result.split(filterText).map((item, i, arr) => {\r\n        if (i === arr.length - 1) return <React.Fragment key={i}>{item}</React.Fragment>\r\n        return (\r\n          <React.Fragment key={i}>\r\n            {item}\r\n            <span style={highlightStyle}>{filterText}</span>\r\n          </React.Fragment>\r\n        )\r\n      })\r\n    }\r\n\r\n    render() {\r\n      const mp = {\r\n        ...this.props,\r\n        onFilter: this.props.onFilter ? this.handlerFilter : undefined,\r\n        renderItem: this.renderItem,\r\n        beforeChange: this.handleReset,\r\n      }\r\n      return <Component {...mp} />\r\n    }\r\n  }\r\n\r\nconst HighlightFilter = highlight(Select)\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <HighlightFilter\r\n        style={{ width: 240, marginBottom: 12 }}\r\n        data={data}\r\n        keygen\r\n        placeholder=\"Select color\"\r\n        onFilter={text => d => d.indexOf(text) >= 0}\r\n        renderResult={d => d}\r\n      />\r\n      <br />\r\n      <HighlightFilter\r\n        style={{ width: 300 }}\r\n        multiple\r\n        keygen\r\n        data={data}\r\n        placeholder=\"Select color\"\r\n        onFilter={text => d => d.indexOf(text) >= 0}\r\n        renderResult={d => d}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"},957:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return r});var a=n(4),l=n(5),i=n(6),o=n(7),t=n(0),d=n.n(t),c=n(164),s=n(488),r=function(e){Object(i.a)(r,e);var n=Object(o.a)(r);function r(e){var t;return Object(a.a)(this,r),(t=n.call(this,e)).handleFilter=function(e){t.setState({loading:!0}),s.a.get("user",{username:e}).then(function(e){t.setState({loading:!1,data:e.data})})},t.state={data:[],loading:!1},t}return Object(l.a)(r,[{key:"componentDidMount",value:function(){this.handleFilter("")}},{key:"render",value:function(){return d.a.createElement(c.a,{loading:this.state.loading,keygen:"id",style:{width:240},data:this.state.data,placeholder:"Select user",onFilter:this.handleFilter,datum:{format:"id"},renderItem:function(e){return"".concat(e.firstName," ").concat(e.lastName)}})}}]),r}(t.Component)},958:function(e,t){e.exports="/**\r\n * - Filter - server\r\n *    -- When the onFilter property don't return a function, you can filter data from server or filter by yourself.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Select } from 'megacosm'\r\nimport { fetch } from 'doc/data/user'\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      data: [],\r\n      loading: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleFilter('')\r\n  }\r\n\r\n  handleFilter = text => {\r\n    this.setState({ loading: true })\r\n    fetch.get('user', { username: text }).then(res => {\r\n      this.setState({ loading: false, data: res.data })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Select\r\n        loading={this.state.loading}\r\n        keygen=\"id\"\r\n        style={{ width: 240 }}\r\n        data={this.state.data}\r\n        placeholder=\"Select user\"\r\n        onFilter={this.handleFilter}\r\n        datum={{ format: 'id' }}\r\n        renderItem={user => `${user.firstName} ${user.lastName}`}\r\n      />\r\n    )\r\n  }\r\n}\r\n"},959:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return r});var a=n(4),l=n(5),i=n(6),o=n(7),t=n(0),d=n.n(t),c=n(164),s=n(488),r=function(e){Object(i.a)(r,e);var n=Object(o.a)(r);function r(e){var t;return Object(a.a)(this,r),(t=n.call(this,e)).handleFilter=function(e){void 0!==e&&(t.setState({loading:!0}),s.a.get("user",{username:e}).then(function(e){t.setState({loading:!1,data:e.data})}))},t.state={data:[],loading:!1},t}return Object(l.a)(r,[{key:"componentDidMount",value:function(){this.handleFilter("")}},{key:"render",value:function(){return d.a.createElement(c.a,{loading:this.state.loading,multiple:!0,keygen:"id",data:this.state.data,placeholder:"Select user",onFilter:this.handleFilter,datum:{format:"id"},renderItem:function(e){return"".concat(e.firstName," ").concat(e.lastName)}})}}]),r}(t.Component)},960:function(e,t){e.exports="/**\r\n * - \r\n *    -- Example: Server-side filters multiple selection.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Select } from 'megacosm'\r\nimport { fetch } from 'doc/data/user'\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      data: [],\r\n      loading: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleFilter('')\r\n  }\r\n\r\n  handleFilter = text => {\r\n    if (text === undefined) return\r\n    this.setState({ loading: true })\r\n    fetch.get('user', { username: text }).then(res => {\r\n      this.setState({ loading: false, data: res.data })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Select\r\n        loading={this.state.loading}\r\n        multiple\r\n        keygen=\"id\"\r\n        data={this.state.data}\r\n        placeholder=\"Select user\"\r\n        onFilter={this.handleFilter}\r\n        datum={{ format: 'id' }}\r\n        renderItem={user => `${user.firstName} ${user.lastName}`}\r\n      />\r\n    )\r\n  }\r\n}\r\n"},961:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return a.a.createElement("div",null,a.a.createElement(l.a,{style:{width:240,marginBottom:12},data:i,keygen:!0,placeholder:"input color",onCreate:!0,defaultValue:"brown"}),a.a.createElement("br",null),a.a.createElement(l.a,{style:{width:400},data:i,keygen:!0,multiple:!0,placeholder:"input color",onCreate:function(e){return e}}))}},962:function(e,t){e.exports="/**\r\n * - Create by input\r\n *    -- Set the onCreate property can create options by inputting.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Select\r\n        style={{ width: 240, marginBottom: 12 }}\r\n        data={data}\r\n        keygen\r\n        placeholder=\"input color\"\r\n        onCreate\r\n        defaultValue=\"brown\"\r\n      />\r\n      <br />\r\n      <Select style={{ width: 400 }} data={data} keygen multiple placeholder=\"input color\" onCreate={t => t} />\r\n    </div>\r\n  )\r\n}\r\n"},963:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return a.a.createElement("div",null,a.a.createElement(l.a,{style:{width:240,marginBottom:12},data:i,placeholder:"input label",keygen:!0,onCreate:!0,onFilter:function(t){return function(e){return 0<=e.indexOf(t)}},filterDelay:0}),a.a.createElement("br",null),a.a.createElement(l.a,{style:{width:360,marginBottom:12},data:i,placeholder:"input label",keygen:!0,onCreate:!0,multiple:!0,onFilter:function(t){return function(e){return 0<=e.indexOf(t)}},filterDelay:0}))}},964:function(e,t){e.exports="/**\r\n * - \r\n *    -- Example: Create options with filter\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Select\r\n        style={{ width: 240, marginBottom: 12 }}\r\n        data={data}\r\n        placeholder=\"input label\"\r\n        keygen\r\n        onCreate\r\n        onFilter={text => d => d.indexOf(text) >= 0}\r\n        filterDelay={0}\r\n      />\r\n      <br />\r\n      <Select\r\n        style={{ width: 360, marginBottom: 12 }}\r\n        data={data}\r\n        placeholder=\"input label\"\r\n        keygen\r\n        onCreate\r\n        multiple\r\n        onFilter={text => d => d.indexOf(text) >= 0}\r\n        filterDelay={0}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"},965:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),n=n(488),i=Object(n.b)(1e4),o=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return a.a.createElement("div",{style:{padding:10,height:100,overflow:"hidden"}},a.a.createElement(l.a,{absolute:!0,data:o,keygen:!0,style:{width:100,marginRight:12},onFilter:function(t){return function(e){return-1<e.indexOf(t)}},placeholder:"default"}),a.a.createElement(l.a,{multiple:!0,data:i,keygen:"id",absolute:!0,style:{width:300},placeholder:"Select user",onFilter:function(t){return function(e){return-1<e.firstName.indexOf(t)}},format:"id",renderItem:function(e){return"".concat(e.firstName," ").concat(e.lastName)}}))}},966:function(e,t){e.exports="/**\r\n * - Absolute\r\n *    -- If the parent container of the pop-up layer is occluded, you can set the absolute property to make the pop-up options rendered in a separate layer. (not recommended if not necessary)\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\nimport { fetchSync as fetchUser } from 'doc/data/user'\r\n\r\nconst users = fetchUser(10000)\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return (\r\n    <div style={{ padding: 10, height: 100, overflow: 'hidden' }}>\r\n      <Select\r\n        absolute\r\n        data={data}\r\n        keygen\r\n        style={{ width: 100, marginRight: 12 }}\r\n        onFilter={text => d => d.indexOf(text) > -1}\r\n        placeholder=\"default\"\r\n      />\r\n\r\n      <Select\r\n        multiple\r\n        data={users}\r\n        keygen=\"id\"\r\n        absolute\r\n        style={{ width: 300 }}\r\n        placeholder=\"Select user\"\r\n        onFilter={text => d => d.firstName.indexOf(text) > -1}\r\n        format=\"id\"\r\n        renderItem={user => `${user.firstName} ${user.lastName}`}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"},967:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),n=n(506),i=Object(n.b)(200),o={width:300,marginBottom:12,display:"block"};t.default=function(){return a.a.createElement("div",null,a.a.createElement(l.a,{data:i,format:"id",keygen:"id",columns:3,prediction:function(e,t){return e===t.id},style:o,placeholder:"Select a city",renderItem:"city"}),a.a.createElement(l.a,{data:i,format:"id",keygen:"id",columns:4,columnWidth:180,multiple:!0,prediction:function(e,t){return e===t.id},style:o,placeholder:"Select citys",renderItem:"city",onFilter:function(t){return function(e){return 0<=e.city.toLowerCase().indexOf(t.toLowerCase())}},absolute:!0}))}},968:function(e,t){e.exports='/**\r\n * - Columns\r\n *    -- Set columns property over 1, options will display in multiple columns.\r\n */\r\nimport React from \'react\'\r\nimport { Select } from \'megacosm\'\r\nimport { fetchSync as fetchCity } from \'doc/data/city\'\r\n\r\nconst citys = fetchCity(200)\r\nconst style = { width: 300, marginBottom: 12, display: \'block\' }\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Select\r\n        data={citys}\r\n        format="id"\r\n        keygen="id"\r\n        columns={3}\r\n        prediction={(v, d) => v === d.id}\r\n        style={style}\r\n        placeholder="Select a city"\r\n        renderItem="city"\r\n      />\r\n\r\n      <Select\r\n        data={citys}\r\n        format="id"\r\n        keygen="id"\r\n        columns={4}\r\n        columnWidth={180}\r\n        multiple\r\n        prediction={(v, d) => v === d.id}\r\n        style={style}\r\n        placeholder="Select citys"\r\n        renderItem="city"\r\n        onFilter={text => d => d.city.toLowerCase().indexOf(text.toLowerCase()) >= 0}\r\n        absolute\r\n      />\r\n    </div>\r\n  )\r\n}\r\n'},969:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),n=n(506),i=Object(n.b)(200);t.default=function(){return a.a.createElement(l.a,{data:i,width:300,format:"id",keygen:"id",columns:-1,columnWidth:500,multiple:!0,prediction:function(e,t){return e===t.id},placeholder:"Select citys",renderItem:"city",onFilter:function(t){return function(e){return 0<=e.city.toLowerCase().indexOf(t.toLowerCase())}},absolute:!0})}},970:function(e,t){e.exports='/**\r\n * - \r\n *    -- Set columns -1, options will display end by end， columnsWidth is the width of the option box\r\n */\r\nimport React from \'react\'\r\nimport { Select } from \'megacosm\'\r\nimport { fetchSync as fetchCity } from \'doc/data/city\'\r\n\r\nconst citys = fetchCity(200)\r\n\r\nexport default function() {\r\n  return (\r\n    <Select\r\n      data={citys}\r\n      width={300}\r\n      format="id"\r\n      keygen="id"\r\n      columns={-1}\r\n      columnWidth={500}\r\n      multiple\r\n      prediction={(v, d) => v === d.id}\r\n      placeholder="Select citys"\r\n      renderItem="city"\r\n      onFilter={text => d => d.city.toLowerCase().indexOf(text.toLowerCase()) >= 0}\r\n      absolute\r\n    />\r\n  )\r\n}\r\n'},971:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return r});var a=n(4),l=n(5),i=n(2),o=n(6),d=n(7),t=n(0),c=n.n(t),s=n(164),u=n(493),r=function(e){Object(o.a)(r,e);var t=Object(d.a)(r);function r(e){var n;return Object(a.a)(this,r),(n=t.call(this,e)).handleChange=function(e,t){e?n.setState({single:t}):n.setState({multiple:t})},n.state={single:"",multiple:[]},n.handleSingleChange=n.handleChange.bind(Object(i.a)(n),!0),n.handleMultipleChange=n.handleChange.bind(Object(i.a)(n),!1),n}return Object(l.a)(r,[{key:"render",value:function(){return c.a.createElement("div",null,c.a.createElement(s.a,{onChange:this.handleSingleChange,value:this.state.single,disabled:function(e){return e.text.startsWith("1")},format:"id",keygen:"id",renderItem:function(e){return"node ".concat(e.text)},style:{width:250,marginBottom:20},treeData:u.c}),c.a.createElement("br",null),c.a.createElement(s.a,{clearable:!0,multiple:!0,onChange:this.handleMultipleChange,value:this.state.multiple,disabled:function(e){return e.text.startsWith("1")},format:"id",keygen:"id",renderItem:function(e){return"node ".concat(e.text)},style:{width:250},treeData:u.c}))}}]),r}(c.a.Component)},972:function(e,t){e.exports="/**\r\n * - Tree Select\r\n *    -- Set treeData to select with tree.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\nimport data from 'doc/data/tree'\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      single: '',\r\n      multiple: [],\r\n    }\r\n\r\n    this.handleSingleChange = this.handleChange.bind(this, true)\r\n    this.handleMultipleChange = this.handleChange.bind(this, false)\r\n  }\r\n\r\n  handleChange = (single, v) => {\r\n    if (single) this.setState({ single: v })\r\n    else this.setState({ multiple: v })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Select\r\n          onChange={this.handleSingleChange}\r\n          value={this.state.single}\r\n          disabled={v => v.text.startsWith('1')}\r\n          format=\"id\"\r\n          keygen=\"id\"\r\n          renderItem={v => `node ${v.text}`}\r\n          style={{ width: 250, marginBottom: 20 }}\r\n          treeData={data}\r\n        />\r\n        <br />\r\n\r\n        <Select\r\n          clearable\r\n          multiple\r\n          onChange={this.handleMultipleChange}\r\n          value={this.state.multiple}\r\n          disabled={v => v.text.startsWith('1')}\r\n          format=\"id\"\r\n          keygen=\"id\"\r\n          renderItem={v => `node ${v.text}`}\r\n          style={{ width: 250 }}\r\n          treeData={data}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"},973:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return r});var a=n(4),l=n(5),i=n(6),o=n(7),t=n(0),d=n.n(t),c=n(164),s=[{id:"1",title:"1",children:[{id:"1-1",title:"1-1",children:[{id:"1-1-1",title:"1-1-1"},{id:"1-1-2",title:"1-1-2"}]},{id:"1-2",title:"1-2"}]},{id:"2",title:"2",children:[{id:"2-1",title:"2-1"},{id:"2-2",title:"2-2"}]},{id:"3",title:"3",children:[{id:"3-1",title:"3-1"}]}],r=function(e){Object(i.a)(r,e);var n=Object(o.a)(r);function r(e){var t;return Object(a.a)(this,r),(t=n.call(this,e)).handleChange=function(e){t.setState({value:e})},t.handleFilter=function(t){return function(e){return-1<e.title.indexOf(t)}},t.state={value:[]},t}return Object(l.a)(r,[{key:"render",value:function(){return d.a.createElement(c.a,{absolute:!0,onFilter:this.handleFilter,clearable:!0,multiple:!0,onChange:this.handleChange,value:this.state.value,disabled:function(e){return e.title.startsWith("1-")},format:"id",keygen:"id",renderItem:function(e){return"node ".concat(e.title)},style:{width:250},treeData:s})}}]),r}(d.a.Component)},974:function(e,t){e.exports="/**\r\n * - Tree Select Filter\r\n *    -- Set onFilter to filter tree data.\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = [\r\n  {\r\n    id: '1',\r\n    title: '1',\r\n    children: [\r\n      {\r\n        id: '1-1',\r\n        title: '1-1',\r\n        children: [\r\n          { id: '1-1-1', title: '1-1-1' },\r\n          { id: '1-1-2', title: '1-1-2' },\r\n        ],\r\n      },\r\n      { id: '1-2', title: '1-2' },\r\n    ],\r\n  },\r\n  {\r\n    id: '2',\r\n    title: '2',\r\n    children: [\r\n      { id: '2-1', title: '2-1' },\r\n      { id: '2-2', title: '2-2' },\r\n    ],\r\n  },\r\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\r\n]\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      value: [],\r\n    }\r\n  }\r\n\r\n  handleChange = v => {\r\n    this.setState({\r\n      value: v,\r\n    })\r\n  }\r\n\r\n  handleFilter = text => v => v.title.indexOf(text) > -1\r\n\r\n  render() {\r\n    return (\r\n      <Select\r\n        absolute\r\n        onFilter={this.handleFilter}\r\n        clearable\r\n        multiple\r\n        onChange={this.handleChange}\r\n        value={this.state.value}\r\n        disabled={v => v.title.startsWith('1-')}\r\n        format=\"id\"\r\n        keygen=\"id\"\r\n        renderItem={v => `node ${v.title}`}\r\n        style={{ width: 250 }}\r\n        treeData={data}\r\n      />\r\n    )\r\n  }\r\n}\r\n"},975:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),l=n(164),i=["red","orange","yellow","green","cyan","blue","violet"];t.default=function(){return a.a.createElement(l.a,{keygen:!0,renderResult:function(e){return"I love ".concat(e)},style:{width:240},data:i,defaultValue:""})}},976:function(e,t){e.exports="/**\r\n * - result\r\n *    --  use renderRsult. to format the result\r\n */\r\nimport React from 'react'\r\nimport { Select } from 'megacosm'\r\n\r\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']\r\n\r\nexport default function() {\r\n  return <Select keygen renderResult={c => `I love ${c}`} style={{ width: 240 }} data={data} defaultValue=\"\" />\r\n}\r\n"}}]);